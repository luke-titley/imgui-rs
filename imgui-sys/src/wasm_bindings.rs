/* automatically generated by rust-bindgen 0.56.0 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::all)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl Default for _IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNodeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockRequest {
    _unused: [u8; 0],
}
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiCond = ::std::os::raw::c_int;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImGuiDir = ::std::os::raw::c_int;
pub type ImGuiKey = ::std::os::raw::c_int;
pub type ImGuiNavInput = ::std::os::raw::c_int;
pub type ImGuiMouseButton = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImDrawCornerFlags = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiButtonFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiComboFlags = ::std::os::raw::c_int;
pub type ImGuiDockNodeFlags = ::std::os::raw::c_int;
pub type ImGuiDragDropFlags = ::std::os::raw::c_int;
pub type ImGuiFocusedFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiKeyModFlags = ::std::os::raw::c_int;
pub type ImGuiPopupFlags = ::std::os::raw::c_int;
pub type ImGuiSelectableFlags = ::std::os::raw::c_int;
pub type ImGuiSliderFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiViewportFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImTextureID = *mut ::std::os::raw::c_void;
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImGuiInputTextCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::std::os::raw::c_int,
>;
pub type ImGuiSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar = ImWchar16;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImU64 = u64;
pub type ImDrawCallback = ::std::option::Option<
    unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
pub type ImDrawIdx = ::std::os::raw::c_ushort;
pub type ImGuiDataAuthority = ::std::os::raw::c_int;
pub type ImGuiLayoutType = ::std::os::raw::c_int;
pub type ImGuiColumnsFlags = ::std::os::raw::c_int;
pub type ImGuiItemFlags = ::std::os::raw::c_int;
pub type ImGuiItemStatusFlags = ::std::os::raw::c_int;
pub type ImGuiNavHighlightFlags = ::std::os::raw::c_int;
pub type ImGuiNavDirSourceFlags = ::std::os::raw::c_int;
pub type ImGuiNavMoveFlags = ::std::os::raw::c_int;
pub type ImGuiNextItemDataFlags = ::std::os::raw::c_int;
pub type ImGuiNextWindowDataFlags = ::std::os::raw::c_int;
pub type ImGuiSeparatorFlags = ::std::os::raw::c_int;
pub type ImGuiTextFlags = ::std::os::raw::c_int;
pub type ImGuiTooltipFlags = ::std::os::raw::c_int;
pub type ImFileHandle = *mut FILE;
pub type ImPoolIdx = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiWindowSettings {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiWindowSettings,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiWindowSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiWindowSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiWindowSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiWindowSettings))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiWindowSettings>())).Size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiWindowSettings>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowSettings),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiWindowSettings>())).Data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowSettings),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiWindowSettings {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImChunkStream_ImGuiWindowSettings {
    pub Buf: ImVector_ImGuiWindowSettings,
}
#[test]
fn bindgen_test_layout_ImChunkStream_ImGuiWindowSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImChunkStream_ImGuiWindowSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImChunkStream_ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImChunkStream_ImGuiWindowSettings>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImChunkStream_ImGuiWindowSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImChunkStream_ImGuiWindowSettings>())).Buf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImChunkStream_ImGuiWindowSettings),
            "::",
            stringify!(Buf)
        )
    );
}
impl Default for ImChunkStream_ImGuiWindowSettings {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawChannel {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawChannel() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawChannel>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawChannel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawChannel>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawChannel>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawChannel>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImDrawChannel {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawCmd {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawCmd,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawCmd() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawCmd>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawCmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawCmd>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawCmd>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawCmd>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImDrawCmd {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawIdx {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawIdx() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawIdx>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawIdx))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawIdx>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawIdx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawIdx>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawIdx>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawIdx>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImDrawIdx {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawListPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImDrawList,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawListPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawListPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawListPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawListPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawListPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawListPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawListPtr>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawListPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImDrawListPtr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawVert {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawVert,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawVert() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawVert>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawVert>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawVert))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawVert>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawVert>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawVert>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImDrawVert {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontPtr>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImFontPtr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontAtlasCustomRect {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontAtlasCustomRect,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontAtlasCustomRect() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontAtlasCustomRect>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontAtlasCustomRect))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImFontAtlasCustomRect>())).Size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImFontAtlasCustomRect>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImFontAtlasCustomRect>())).Data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImFontAtlasCustomRect {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontConfig {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontConfig,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontConfig() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontConfig>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontConfig>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontConfig>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontConfig>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImFontConfig {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontGlyph {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontGlyph,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontGlyph() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontGlyph>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontGlyph>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontGlyph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontGlyph>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontGlyph>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontGlyph>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImFontGlyph {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiColorMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiColorMod,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiColorMod() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiColorMod>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiColorMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiColorMod>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiColorMod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColorMod>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColorMod>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColorMod>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiColorMod {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiColumnData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiColumnData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiColumnData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiColumnData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiColumnData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiColumnData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColumnData>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColumnData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiColumnData>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColumnData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColumnData>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColumnData),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiColumnData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiColumns {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiColumns,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiColumns>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiColumns>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiColumns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColumns>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColumns),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColumns>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColumns),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColumns>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColumns),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiColumns {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiDockNodeSettings {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockNodeSettings,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiDockNodeSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiDockNodeSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiDockNodeSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiDockNodeSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiDockNodeSettings))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiDockNodeSettings>())).Size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiDockNodeSettings>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiDockNodeSettings>())).Data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiDockNodeSettings {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiDockRequest {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockRequest,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiDockRequest() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiDockRequest>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiDockRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiDockRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiDockRequest))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiDockRequest>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiDockRequest>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiDockRequest>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiDockRequest {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiGroupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiGroupData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiGroupData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiGroupData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiGroupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiGroupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiGroupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiGroupData>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiGroupData>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiGroupData>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiGroupData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiID,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiID() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiID>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiID))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiID>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiID>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiID>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiID>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiID {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiItemFlags {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiItemFlags,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiItemFlags() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiItemFlags>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiItemFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiItemFlags>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiItemFlags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiItemFlags>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiItemFlags>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiItemFlags>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiItemFlags {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiPlatformMonitor {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPlatformMonitor,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPlatformMonitor() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPlatformMonitor>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPlatformMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPlatformMonitor>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPlatformMonitor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiPlatformMonitor>())).Size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiPlatformMonitor>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiPlatformMonitor>())).Data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiPlatformMonitor {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiPopupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPopupData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPopupData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPopupData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPopupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPopupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPopupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPopupData>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiPopupData>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPopupData>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiPopupData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiPtrOrIndex {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPtrOrIndex,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPtrOrIndex() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPtrOrIndex>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPtrOrIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPtrOrIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPtrOrIndex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPtrOrIndex>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiPtrOrIndex>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPtrOrIndex>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiPtrOrIndex {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiSettingsHandler {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiSettingsHandler,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiSettingsHandler() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiSettingsHandler>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiSettingsHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiSettingsHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiSettingsHandler))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiSettingsHandler>())).Size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiSettingsHandler>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiSettingsHandler>())).Data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiSettingsHandler {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiShrinkWidthItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiShrinkWidthItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiShrinkWidthItem() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiShrinkWidthItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiShrinkWidthItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiShrinkWidthItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiShrinkWidthItem))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiShrinkWidthItem>())).Size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiShrinkWidthItem>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiShrinkWidthItem>())).Data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiShrinkWidthItem {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiStoragePair {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStoragePair() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStoragePair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStoragePair>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiStoragePair>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStoragePair>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiStoragePair {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiStyleMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStyleMod,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStyleMod() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStyleMod>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStyleMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStyleMod>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStyleMod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStyleMod>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStyleMod>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStyleMod>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiStyleMod {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTabItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTabItem() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTabItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTabItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTabItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTabItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabItem>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabItem>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabItem>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiTabItem {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTextRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTextRange,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTextRange() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTextRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTextRange>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiTextRange>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTextRange>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiTextRange {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiViewportPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiViewportPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiViewportPtr>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiViewportPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiViewportPtr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiViewportPPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewportP,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiViewportPPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiViewportPPtr>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiViewportPPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiViewportPPtr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiWindowPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiWindow,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiWindowPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiWindowPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiWindowPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiWindowPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiWindowPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiWindowPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImVector_ImGuiWindowPtr>())).Capacity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiWindowPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiWindowPtr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImTextureID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImTextureID,
}
#[test]
fn bindgen_test_layout_ImVector_ImTextureID() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImTextureID>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImTextureID))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImTextureID>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImTextureID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImTextureID>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImTextureID>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImTextureID>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImTextureID {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImU32 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU32,
}
#[test]
fn bindgen_test_layout_ImVector_ImU32() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImU32>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImU32))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImU32>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImU32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImU32>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImU32>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImU32>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImU32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImVec2 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec2,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec2() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec2>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec2>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec2>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec2>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec2>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImVec2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImVec4 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec4,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec4() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec4>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec4>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec4>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec4>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImVec4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImWchar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImWchar,
}
#[test]
fn bindgen_test_layout_ImVector_ImWchar() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImWchar>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImWchar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImWchar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImWchar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImWchar>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImWchar>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImWchar>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImWchar {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_char() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_char>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_char))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_char>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_char))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_char>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_char>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_char>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_char {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_const_charPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_const_charPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_const_charPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_const_charPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_const_charPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_const_charPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_const_charPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_const_charPtr>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_const_charPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_const_charPtr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_float {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut f32,
}
#[test]
fn bindgen_test_layout_ImVector_float() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_float>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_float))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_float>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_float))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_float>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_float>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_float>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_float {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_unsigned_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_ImVector_unsigned_char() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_unsigned_char>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_unsigned_char))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_unsigned_char>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_unsigned_char))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_unsigned_char>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_unsigned_char>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_unsigned_char>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_unsigned_char {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_ImVec2() {
    assert_eq!(
        ::std::mem::size_of::<ImVec2>(),
        8usize,
        concat!("Size of: ", stringify!(ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ImVec4() {
    assert_eq!(
        ::std::mem::size_of::<ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec4>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).z as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).w as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(w))
    );
}
pub const ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags_AlwaysUseWindowPadding: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 1048576;
pub const ImGuiWindowFlags_NoDocking: ImGuiWindowFlags_ = 2097152;
pub const ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 786432;
pub const ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 786944;
pub const ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = 8388608;
pub const ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub const ImGuiWindowFlags_DockNodeHost: ImGuiWindowFlags_ = 536870912;
pub type ImGuiWindowFlags_ = ::std::os::raw::c_uint;
pub const ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags_AlwaysInsertMode: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 131072;
pub const ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 262144;
pub const ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 524288;
pub const ImGuiInputTextFlags_Multiline: ImGuiInputTextFlags_ = 1048576;
pub const ImGuiInputTextFlags_NoMarkEdited: ImGuiInputTextFlags_ = 2097152;
pub type ImGuiInputTextFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags_AllowItemOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub type ImGuiTreeNodeFlags_ = ::std::os::raw::c_uint;
pub const ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 64;
pub const ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 384;
pub type ImGuiPopupFlags_ = ::std::os::raw::c_uint;
pub const ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags_AllowItemOverlap: ImGuiSelectableFlags_ = 16;
pub type ImGuiSelectableFlags_ = ::std::os::raw::c_uint;
pub const ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 192;
pub const ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 64;
pub type ImGuiTabBarFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub type ImGuiTabItemFlags_ = ::std::os::raw::c_uint;
pub const ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::std::os::raw::c_uint;
pub const ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 64;
pub const ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 128;
pub const ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 104;
pub const ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub type ImGuiHoveredFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDockNodeFlags_None: ImGuiDockNodeFlags_ = 0;
pub const ImGuiDockNodeFlags_KeepAliveOnly: ImGuiDockNodeFlags_ = 1;
pub const ImGuiDockNodeFlags_NoDockingInCentralNode: ImGuiDockNodeFlags_ = 4;
pub const ImGuiDockNodeFlags_PassthruCentralNode: ImGuiDockNodeFlags_ = 8;
pub const ImGuiDockNodeFlags_NoSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags_NoResize: ImGuiDockNodeFlags_ = 32;
pub const ImGuiDockNodeFlags_AutoHideTabBar: ImGuiDockNodeFlags_ = 64;
pub type ImGuiDockNodeFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ = 2048;
pub const ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub type ImGuiDragDropFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType_COUNT: ImGuiDataType_ = 10;
pub type ImGuiDataType_ = ::std::os::raw::c_uint;
pub const ImGuiDir_None: ImGuiDir_ = -1;
pub const ImGuiDir_Left: ImGuiDir_ = 0;
pub const ImGuiDir_Right: ImGuiDir_ = 1;
pub const ImGuiDir_Up: ImGuiDir_ = 2;
pub const ImGuiDir_Down: ImGuiDir_ = 3;
pub const ImGuiDir_COUNT: ImGuiDir_ = 4;
pub type ImGuiDir_ = ::std::os::raw::c_int;
pub const ImGuiKey_Tab: ImGuiKey_ = 0;
pub const ImGuiKey_LeftArrow: ImGuiKey_ = 1;
pub const ImGuiKey_RightArrow: ImGuiKey_ = 2;
pub const ImGuiKey_UpArrow: ImGuiKey_ = 3;
pub const ImGuiKey_DownArrow: ImGuiKey_ = 4;
pub const ImGuiKey_PageUp: ImGuiKey_ = 5;
pub const ImGuiKey_PageDown: ImGuiKey_ = 6;
pub const ImGuiKey_Home: ImGuiKey_ = 7;
pub const ImGuiKey_End: ImGuiKey_ = 8;
pub const ImGuiKey_Insert: ImGuiKey_ = 9;
pub const ImGuiKey_Delete: ImGuiKey_ = 10;
pub const ImGuiKey_Backspace: ImGuiKey_ = 11;
pub const ImGuiKey_Space: ImGuiKey_ = 12;
pub const ImGuiKey_Enter: ImGuiKey_ = 13;
pub const ImGuiKey_Escape: ImGuiKey_ = 14;
pub const ImGuiKey_KeyPadEnter: ImGuiKey_ = 15;
pub const ImGuiKey_A: ImGuiKey_ = 16;
pub const ImGuiKey_C: ImGuiKey_ = 17;
pub const ImGuiKey_V: ImGuiKey_ = 18;
pub const ImGuiKey_X: ImGuiKey_ = 19;
pub const ImGuiKey_Y: ImGuiKey_ = 20;
pub const ImGuiKey_Z: ImGuiKey_ = 21;
pub const ImGuiKey_COUNT: ImGuiKey_ = 22;
pub type ImGuiKey_ = ::std::os::raw::c_uint;
pub const ImGuiKeyModFlags_None: ImGuiKeyModFlags_ = 0;
pub const ImGuiKeyModFlags_Ctrl: ImGuiKeyModFlags_ = 1;
pub const ImGuiKeyModFlags_Shift: ImGuiKeyModFlags_ = 2;
pub const ImGuiKeyModFlags_Alt: ImGuiKeyModFlags_ = 4;
pub const ImGuiKeyModFlags_Super: ImGuiKeyModFlags_ = 8;
pub type ImGuiKeyModFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNavInput_Activate: ImGuiNavInput_ = 0;
pub const ImGuiNavInput_Cancel: ImGuiNavInput_ = 1;
pub const ImGuiNavInput_Input: ImGuiNavInput_ = 2;
pub const ImGuiNavInput_Menu: ImGuiNavInput_ = 3;
pub const ImGuiNavInput_DpadLeft: ImGuiNavInput_ = 4;
pub const ImGuiNavInput_DpadRight: ImGuiNavInput_ = 5;
pub const ImGuiNavInput_DpadUp: ImGuiNavInput_ = 6;
pub const ImGuiNavInput_DpadDown: ImGuiNavInput_ = 7;
pub const ImGuiNavInput_LStickLeft: ImGuiNavInput_ = 8;
pub const ImGuiNavInput_LStickRight: ImGuiNavInput_ = 9;
pub const ImGuiNavInput_LStickUp: ImGuiNavInput_ = 10;
pub const ImGuiNavInput_LStickDown: ImGuiNavInput_ = 11;
pub const ImGuiNavInput_FocusPrev: ImGuiNavInput_ = 12;
pub const ImGuiNavInput_FocusNext: ImGuiNavInput_ = 13;
pub const ImGuiNavInput_TweakSlow: ImGuiNavInput_ = 14;
pub const ImGuiNavInput_TweakFast: ImGuiNavInput_ = 15;
pub const ImGuiNavInput_KeyMenu_: ImGuiNavInput_ = 16;
pub const ImGuiNavInput_KeyLeft_: ImGuiNavInput_ = 17;
pub const ImGuiNavInput_KeyRight_: ImGuiNavInput_ = 18;
pub const ImGuiNavInput_KeyUp_: ImGuiNavInput_ = 19;
pub const ImGuiNavInput_KeyDown_: ImGuiNavInput_ = 20;
pub const ImGuiNavInput_COUNT: ImGuiNavInput_ = 21;
pub const ImGuiNavInput_InternalStart_: ImGuiNavInput_ = 16;
pub type ImGuiNavInput_ = ::std::os::raw::c_uint;
pub const ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = 4;
pub const ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = 8;
pub const ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags_DockingEnable: ImGuiConfigFlags_ = 64;
pub const ImGuiConfigFlags_ViewportsEnable: ImGuiConfigFlags_ = 1024;
pub const ImGuiConfigFlags_DpiEnableScaleViewports: ImGuiConfigFlags_ = 16384;
pub const ImGuiConfigFlags_DpiEnableScaleFonts: ImGuiConfigFlags_ = 32768;
pub const ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub type ImGuiConfigFlags_ = ::std::os::raw::c_uint;
pub const ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub const ImGuiBackendFlags_PlatformHasViewports: ImGuiBackendFlags_ = 1024;
pub const ImGuiBackendFlags_HasMouseHoveredViewport: ImGuiBackendFlags_ = 2048;
pub const ImGuiBackendFlags_RendererHasViewports: ImGuiBackendFlags_ = 4096;
pub type ImGuiBackendFlags_ = ::std::os::raw::c_uint;
pub const ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol_Tab: ImGuiCol_ = 33;
pub const ImGuiCol_TabHovered: ImGuiCol_ = 34;
pub const ImGuiCol_TabActive: ImGuiCol_ = 35;
pub const ImGuiCol_TabUnfocused: ImGuiCol_ = 36;
pub const ImGuiCol_TabUnfocusedActive: ImGuiCol_ = 37;
pub const ImGuiCol_DockingPreview: ImGuiCol_ = 38;
pub const ImGuiCol_DockingEmptyBg: ImGuiCol_ = 39;
pub const ImGuiCol_PlotLines: ImGuiCol_ = 40;
pub const ImGuiCol_PlotLinesHovered: ImGuiCol_ = 41;
pub const ImGuiCol_PlotHistogram: ImGuiCol_ = 42;
pub const ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 43;
pub const ImGuiCol_TextSelectedBg: ImGuiCol_ = 44;
pub const ImGuiCol_DragDropTarget: ImGuiCol_ = 45;
pub const ImGuiCol_NavHighlight: ImGuiCol_ = 46;
pub const ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 47;
pub const ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 48;
pub const ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 49;
pub const ImGuiCol_COUNT: ImGuiCol_ = 50;
pub type ImGuiCol_ = ::std::os::raw::c_uint;
pub const ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 23;
pub type ImGuiStyleVar_ = ::std::os::raw::c_uint;
pub const ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub const ImGuiButtonFlags_MouseButtonDefault_: ImGuiButtonFlags_ = 1;
pub type ImGuiButtonFlags_ = ::std::os::raw::c_uint;
pub const ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = 131072;
pub const ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 262144;
pub const ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags__OptionsDefault: ImGuiColorEditFlags_ = 177209344;
pub const ImGuiColorEditFlags__DisplayMask: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags__DataTypeMask: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags__PickerMask: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags__InputMask: ImGuiColorEditFlags_ = 402653184;
pub type ImGuiColorEditFlags_ = ::std::os::raw::c_uint;
pub const ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 16;
pub const ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub type ImGuiSliderFlags_ = ::std::os::raw::c_uint;
pub const ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::std::os::raw::c_uint;
pub const ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 9;
pub type ImGuiMouseCursor_ = ::std::os::raw::c_int;
pub const ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyle {
    pub Alpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabMinWidthForCloseButton: f32,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub Colors: [ImVec4; 50usize],
}
#[test]
fn bindgen_test_layout_ImGuiStyle() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyle>(),
        988usize,
        concat!("Size of: ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyle>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).Alpha as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(Alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowPadding as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowRounding as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowBorderSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowMinSize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowMinSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowTitleAlign as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowTitleAlign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyle>())).WindowMenuButtonPosition as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowMenuButtonPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ChildRounding as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ChildRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ChildBorderSize as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ChildBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).PopupRounding as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(PopupRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).PopupBorderSize as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(PopupBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FramePadding as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FramePadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FrameRounding as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FrameRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FrameBorderSize as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FrameBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ItemSpacing as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ItemSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ItemInnerSpacing as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ItemInnerSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TouchExtraPadding as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TouchExtraPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).IndentSpacing as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(IndentSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ColumnsMinSpacing as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ColumnsMinSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ScrollbarSize as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ScrollbarSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ScrollbarRounding as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ScrollbarRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).GrabMinSize as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(GrabMinSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).GrabRounding as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(GrabRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).LogSliderDeadzone as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(LogSliderDeadzone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TabRounding as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TabBorderSize as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabBorderSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyle>())).TabMinWidthForCloseButton as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabMinWidthForCloseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ColorButtonPosition as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ColorButtonPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ButtonTextAlign as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ButtonTextAlign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).SelectableTextAlign as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SelectableTextAlign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).DisplayWindowPadding as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisplayWindowPadding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyle>())).DisplaySafeAreaPadding as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisplaySafeAreaPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).MouseCursorScale as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(MouseCursorScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedLines as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedLines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedLinesUseTex as *const _ as usize
        },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedLinesUseTex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedFill as *const _ as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedFill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).CurveTessellationTol as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CurveTessellationTol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyle>())).CircleSegmentMaxError as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CircleSegmentMaxError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).Colors as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(Colors)
        )
    );
}
impl Default for ImGuiStyle {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImGuiStyle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ImGuiStyle {{ Alpha: {:?}, WindowPadding: {:?}, WindowRounding: {:?}, WindowBorderSize: {:?}, WindowMinSize: {:?}, WindowTitleAlign: {:?}, WindowMenuButtonPosition: {:?}, ChildRounding: {:?}, ChildBorderSize: {:?}, PopupRounding: {:?}, PopupBorderSize: {:?}, FramePadding: {:?}, FrameRounding: {:?}, FrameBorderSize: {:?}, ItemSpacing: {:?}, ItemInnerSpacing: {:?}, TouchExtraPadding: {:?}, IndentSpacing: {:?}, ColumnsMinSpacing: {:?}, ScrollbarSize: {:?}, ScrollbarRounding: {:?}, GrabMinSize: {:?}, GrabRounding: {:?}, LogSliderDeadzone: {:?}, TabRounding: {:?}, TabBorderSize: {:?}, TabMinWidthForCloseButton: {:?}, ColorButtonPosition: {:?}, ButtonTextAlign: {:?}, SelectableTextAlign: {:?}, DisplayWindowPadding: {:?}, DisplaySafeAreaPadding: {:?}, MouseCursorScale: {:?}, AntiAliasedLines: {:?}, AntiAliasedLinesUseTex: {:?}, AntiAliasedFill: {:?}, CurveTessellationTol: {:?}, CircleSegmentMaxError: {:?}, Colors: [{}] }}" , self . Alpha , self . WindowPadding , self . WindowRounding , self . WindowBorderSize , self . WindowMinSize , self . WindowTitleAlign , self . WindowMenuButtonPosition , self . ChildRounding , self . ChildBorderSize , self . PopupRounding , self . PopupBorderSize , self . FramePadding , self . FrameRounding , self . FrameBorderSize , self . ItemSpacing , self . ItemInnerSpacing , self . TouchExtraPadding , self . IndentSpacing , self . ColumnsMinSpacing , self . ScrollbarSize , self . ScrollbarRounding , self . GrabMinSize , self . GrabRounding , self . LogSliderDeadzone , self . TabRounding , self . TabBorderSize , self . TabMinWidthForCloseButton , self . ColorButtonPosition , self . ButtonTextAlign , self . SelectableTextAlign , self . DisplayWindowPadding , self . DisplaySafeAreaPadding , self . MouseCursorScale , self . AntiAliasedLines , self . AntiAliasedLinesUseTex , self . AntiAliasedFill , self . CurveTessellationTol , self . CircleSegmentMaxError , self . Colors . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > ())
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiIO {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::std::os::raw::c_char,
    pub LogFilename: *const ::std::os::raw::c_char,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyMap: [::std::os::raw::c_int; 22usize],
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontGlobalScale: f32,
    pub FontAllowUserScaling: bool,
    pub FontDefault: *mut ImFont,
    pub DisplayFramebufferScale: ImVec2,
    pub ConfigDockingNoSplit: bool,
    pub ConfigDockingWithShift: bool,
    pub ConfigDockingAlwaysTabBar: bool,
    pub ConfigDockingTransparentPayload: bool,
    pub ConfigViewportsNoAutoMerge: bool,
    pub ConfigViewportsNoTaskBarIcon: bool,
    pub ConfigViewportsNoDecoration: bool,
    pub ConfigViewportsNoDefaultParent: bool,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigWindowsMemoryCompactTimer: f32,
    pub BackendPlatformName: *const ::std::os::raw::c_char,
    pub BackendRendererName: *const ::std::os::raw::c_char,
    pub BackendPlatformUserData: *mut ::std::os::raw::c_void,
    pub BackendRendererUserData: *mut ::std::os::raw::c_void,
    pub BackendLanguageUserData: *mut ::std::os::raw::c_void,
    pub GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub ClipboardUserData: *mut ::std::os::raw::c_void,
    pub RenderDrawListsFnUnused: *mut ::std::os::raw::c_void,
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub MouseHoveredViewport: ImGuiID,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub KeysDown: [bool; 512usize],
    pub NavInputs: [f32; 21usize],
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::std::os::raw::c_int,
    pub MetricsRenderIndices: ::std::os::raw::c_int,
    pub MetricsRenderWindows: ::std::os::raw::c_int,
    pub MetricsActiveWindows: ::std::os::raw::c_int,
    pub MetricsActiveAllocations: ::std::os::raw::c_int,
    pub MouseDelta: ImVec2,
    pub KeyMods: ImGuiKeyModFlags,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownWasDoubleClick: [bool; 5usize],
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub KeysDownDuration: [f32; 512usize],
    pub KeysDownDurationPrev: [f32; 512usize],
    pub NavInputsDownDuration: [f32; 21usize],
    pub NavInputsDownDurationPrev: [f32; 21usize],
    pub PenPressure: f32,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector_ImWchar,
}
#[test]
fn bindgen_test_layout_ImGuiIO() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiIO>(),
        5464usize,
        concat!("Size of: ", stringify!(ImGuiIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiIO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigFlags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DisplaySize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DeltaTime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DeltaTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).IniSavingRate as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(IniSavingRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).IniFilename as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(IniFilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).LogFilename as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(LogFilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClickTime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClickTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClickMaxDist as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClickMaxDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragThreshold as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragThreshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyMap as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyRepeatDelay as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyRepeatDelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyRepeatRate as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyRepeatRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).UserData as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).Fonts as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(Fonts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontGlobalScale as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontGlobalScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontAllowUserScaling as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontAllowUserScaling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontDefault as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontDefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DisplayFramebufferScale as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DisplayFramebufferScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigDockingNoSplit as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingNoSplit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigDockingWithShift as *const _ as usize },
        193usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingWithShift)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigDockingAlwaysTabBar as *const _ as usize
        },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingAlwaysTabBar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigDockingTransparentPayload as *const _ as usize
        },
        195usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingTransparentPayload)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigViewportsNoAutoMerge as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoAutoMerge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigViewportsNoTaskBarIcon as *const _ as usize
        },
        197usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoTaskBarIcon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigViewportsNoDecoration as *const _ as usize
        },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoDecoration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigViewportsNoDefaultParent as *const _ as usize
        },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoDefaultParent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDrawCursor as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDrawCursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigMacOSXBehaviors as *const _ as usize },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigMacOSXBehaviors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigInputTextCursorBlink as *const _ as usize
        },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigInputTextCursorBlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigWindowsResizeFromEdges as *const _ as usize
        },
        203usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsResizeFromEdges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigWindowsMoveFromTitleBarOnly as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsMoveFromTitleBarOnly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigWindowsMemoryCompactTimer as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsMemoryCompactTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendPlatformName as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendPlatformName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendRendererName as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendRendererName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendPlatformUserData as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendPlatformUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendRendererUserData as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendRendererUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendLanguageUserData as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendLanguageUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).GetClipboardTextFn as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(GetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).SetClipboardTextFn as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(SetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ClipboardUserData as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ClipboardUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).RenderDrawListsFnUnused as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(RenderDrawListsFnUnused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MousePos as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MousePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDown as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseWheel as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseWheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseWheelH as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseWheelH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseHoveredViewport as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseHoveredViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyCtrl as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyCtrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyShift as *const _ as usize },
        317usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyShift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyAlt as *const _ as usize },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyAlt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeySuper as *const _ as usize },
        319usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeySuper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDown as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysDown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavInputs as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavInputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantCaptureMouse as *const _ as usize },
        916usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureMouse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantCaptureKeyboard as *const _ as usize },
        917usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureKeyboard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantTextInput as *const _ as usize },
        918usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantTextInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantSetMousePos as *const _ as usize },
        919usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantSetMousePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantSaveIniSettings as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantSaveIniSettings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavActive as *const _ as usize },
        921usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavVisible as *const _ as usize },
        922usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).Framerate as *const _ as usize },
        924usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(Framerate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderVertices as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderVertices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderIndices as *const _ as usize },
        932usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderIndices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderWindows as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderWindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsActiveWindows as *const _ as usize },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsActiveWindows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).MetricsActiveAllocations as *const _ as usize
        },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsActiveAllocations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDelta as *const _ as usize },
        948usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDelta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyMods as *const _ as usize },
        956usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyMods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MousePosPrev as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MousePosPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClickedPos as *const _ as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClickedTime as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClicked as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClicked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClicked as *const _ as usize },
        1053usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClicked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseReleased as *const _ as usize },
        1058usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseReleased)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownOwned as *const _ as usize },
        1063usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownOwned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownWasDoubleClick as *const _ as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownWasDoubleClick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownDuration as *const _ as usize },
        1076usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownDuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownDurationPrev as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragMaxDistanceAbs as *const _ as usize },
        1116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragMaxDistanceAbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragMaxDistanceSqr as *const _ as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragMaxDistanceSqr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDownDuration as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysDownDuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDownDurationPrev as *const _ as usize },
        3224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavInputsDownDuration as *const _ as usize },
        5272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavInputsDownDuration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).NavInputsDownDurationPrev as *const _ as usize
        },
        5356usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavInputsDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).PenPressure as *const _ as usize },
        5440usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(PenPressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).InputQueueSurrogate as *const _ as usize },
        5444usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(InputQueueSurrogate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).InputQueueCharacters as *const _ as usize },
        5448usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(InputQueueCharacters)
        )
    );
}
impl Default for ImGuiIO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImGuiIO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ImGuiIO {{ ConfigFlags: {:?}, BackendFlags: {:?}, DisplaySize: {:?}, DeltaTime: {:?}, IniSavingRate: {:?}, IniFilename: {:?}, LogFilename: {:?}, MouseDoubleClickTime: {:?}, MouseDoubleClickMaxDist: {:?}, MouseDragThreshold: {:?}, KeyMap: {:?}, KeyRepeatDelay: {:?}, KeyRepeatRate: {:?}, UserData: {:?}, Fonts: {:?}, FontGlobalScale: {:?}, FontAllowUserScaling: {:?}, FontDefault: {:?}, DisplayFramebufferScale: {:?}, ConfigDockingNoSplit: {:?}, ConfigDockingWithShift: {:?}, ConfigDockingAlwaysTabBar: {:?}, ConfigDockingTransparentPayload: {:?}, ConfigViewportsNoAutoMerge: {:?}, ConfigViewportsNoTaskBarIcon: {:?}, ConfigViewportsNoDecoration: {:?}, ConfigViewportsNoDefaultParent: {:?}, MouseDrawCursor: {:?}, ConfigMacOSXBehaviors: {:?}, ConfigInputTextCursorBlink: {:?}, ConfigWindowsResizeFromEdges: {:?}, ConfigWindowsMoveFromTitleBarOnly: {:?}, ConfigWindowsMemoryCompactTimer: {:?}, BackendPlatformName: {:?}, BackendRendererName: {:?}, BackendPlatformUserData: {:?}, BackendRendererUserData: {:?}, BackendLanguageUserData: {:?}, GetClipboardTextFn: {:?}, SetClipboardTextFn: {:?}, ClipboardUserData: {:?}, RenderDrawListsFnUnused: {:?}, MousePos: {:?}, MouseDown: {:?}, MouseWheel: {:?}, MouseWheelH: {:?}, MouseHoveredViewport: {:?}, KeyCtrl: {:?}, KeyShift: {:?}, KeyAlt: {:?}, KeySuper: {:?}, KeysDown: [{}], NavInputs: {:?}, WantCaptureMouse: {:?}, WantCaptureKeyboard: {:?}, WantTextInput: {:?}, WantSetMousePos: {:?}, WantSaveIniSettings: {:?}, NavActive: {:?}, NavVisible: {:?}, Framerate: {:?}, MetricsRenderVertices: {:?}, MetricsRenderIndices: {:?}, MetricsRenderWindows: {:?}, MetricsActiveWindows: {:?}, MetricsActiveAllocations: {:?}, MouseDelta: {:?}, KeyMods: {:?}, MousePosPrev: {:?}, MouseClickedPos: {:?}, MouseClickedTime: {:?}, MouseClicked: {:?}, MouseDoubleClicked: {:?}, MouseReleased: {:?}, MouseDownOwned: {:?}, MouseDownWasDoubleClick: {:?}, MouseDownDuration: {:?}, MouseDownDurationPrev: {:?}, MouseDragMaxDistanceAbs: {:?}, MouseDragMaxDistanceSqr: {:?}, KeysDownDuration: [{}], KeysDownDurationPrev: [{}], NavInputsDownDuration: {:?}, NavInputsDownDurationPrev: {:?}, PenPressure: {:?}, InputQueueSurrogate: {:?}, InputQueueCharacters: {:?} }}" , self . ConfigFlags , self . BackendFlags , self . DisplaySize , self . DeltaTime , self . IniSavingRate , self . IniFilename , self . LogFilename , self . MouseDoubleClickTime , self . MouseDoubleClickMaxDist , self . MouseDragThreshold , self . KeyMap , self . KeyRepeatDelay , self . KeyRepeatRate , self . UserData , self . Fonts , self . FontGlobalScale , self . FontAllowUserScaling , self . FontDefault , self . DisplayFramebufferScale , self . ConfigDockingNoSplit , self . ConfigDockingWithShift , self . ConfigDockingAlwaysTabBar , self . ConfigDockingTransparentPayload , self . ConfigViewportsNoAutoMerge , self . ConfigViewportsNoTaskBarIcon , self . ConfigViewportsNoDecoration , self . ConfigViewportsNoDefaultParent , self . MouseDrawCursor , self . ConfigMacOSXBehaviors , self . ConfigInputTextCursorBlink , self . ConfigWindowsResizeFromEdges , self . ConfigWindowsMoveFromTitleBarOnly , self . ConfigWindowsMemoryCompactTimer , self . BackendPlatformName , self . BackendRendererName , self . BackendPlatformUserData , self . BackendRendererUserData , self . BackendLanguageUserData , self . GetClipboardTextFn , self . SetClipboardTextFn , self . ClipboardUserData , self . RenderDrawListsFnUnused , self . MousePos , self . MouseDown , self . MouseWheel , self . MouseWheelH , self . MouseHoveredViewport , self . KeyCtrl , self . KeyShift , self . KeyAlt , self . KeySuper , self . KeysDown . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > () , self . NavInputs , self . WantCaptureMouse , self . WantCaptureKeyboard , self . WantTextInput , self . WantSetMousePos , self . WantSaveIniSettings , self . NavActive , self . NavVisible , self . Framerate , self . MetricsRenderVertices , self . MetricsRenderIndices , self . MetricsRenderWindows , self . MetricsActiveWindows , self . MetricsActiveAllocations , self . MouseDelta , self . KeyMods , self . MousePosPrev , self . MouseClickedPos , self . MouseClickedTime , self . MouseClicked , self . MouseDoubleClicked , self . MouseReleased , self . MouseDownOwned , self . MouseDownWasDoubleClick , self . MouseDownDuration , self . MouseDownDurationPrev , self . MouseDragMaxDistanceAbs , self . MouseDragMaxDistanceSqr , self . KeysDownDuration . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > () , self . KeysDownDurationPrev . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > () , self . NavInputsDownDuration , self . NavInputsDownDurationPrev , self . PenPressure , self . InputQueueSurrogate , self . InputQueueCharacters)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputTextCallbackData {
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::std::os::raw::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::std::os::raw::c_char,
    pub BufTextLen: ::std::os::raw::c_int,
    pub BufSize: ::std::os::raw::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::std::os::raw::c_int,
    pub SelectionStart: ::std::os::raw::c_int,
    pub SelectionEnd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextCallbackData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextCallbackData>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).EventFlag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).Flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).UserData as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).EventChar as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventChar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).EventKey as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).Buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).BufTextLen as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufTextLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).BufSize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).BufDirty as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufDirty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).CursorPos as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(CursorPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).SelectionStart as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(SelectionStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).SelectionEnd as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(SelectionEnd)
        )
    );
}
impl Default for ImGuiInputTextCallbackData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiSizeCallbackData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiSizeCallbackData>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSizeCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).UserData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).Pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).CurrentSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(CurrentSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).DesiredSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(DesiredSize)
        )
    );
}
impl Default for ImGuiSizeCallbackData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiWindowClass {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockNodeFlagsOverrideClear: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowClass() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowClass>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiWindowClass))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowClass>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowClass>())).ClassId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ClassId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowClass>())).ParentViewportId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ParentViewportId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowClass>())).ViewportFlagsOverrideSet as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ViewportFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowClass>())).ViewportFlagsOverrideClear as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ViewportFlagsOverrideClear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowClass>())).DockNodeFlagsOverrideSet as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockNodeFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowClass>())).DockNodeFlagsOverrideClear as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockNodeFlagsOverrideClear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowClass>())).DockingAlwaysTabBar as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockingAlwaysTabBar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowClass>())).DockingAllowUnclassed as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockingAllowUnclassed)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiPayload {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
#[test]
fn bindgen_test_layout_ImGuiPayload() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPayload>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPayload>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).SourceId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(SourceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).SourceParentId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(SourceParentId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataFrameCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataFrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Preview as *const _ as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Preview)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Delivery as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Delivery)
        )
    );
}
impl Default for ImGuiPayload {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImGuiPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ImGuiPayload {{ Data: {:?}, DataSize: {:?}, SourceId: {:?}, SourceParentId: {:?}, DataFrameCount: {:?}, DataType: [{}], Preview: {:?}, Delivery: {:?} }}" , self . Data , self . DataSize , self . SourceId , self . SourceParentId , self . DataFrameCount , self . DataType . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > () , self . Preview , self . Delivery)
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiOnceUponAFrame {
    pub RefFrame: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiOnceUponAFrame() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Size of: ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOnceUponAFrame>())).RefFrame as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOnceUponAFrame),
            "::",
            stringify!(RefFrame)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTextRange {
    pub b: *const ::std::os::raw::c_char,
    pub e: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextRange() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextRange>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextRange),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextRange>())).e as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextRange),
            "::",
            stringify!(e)
        )
    );
}
impl Default for ImGuiTextRange {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiTextFilter {
    pub InputBuf: [::std::os::raw::c_char; 256usize],
    pub Filters: ImVector_ImGuiTextRange,
    pub CountGrep: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiTextFilter() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextFilter>(),
        280usize,
        concat!("Size of: ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).InputBuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(InputBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).Filters as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(Filters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).CountGrep as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(CountGrep)
        )
    );
}
impl Default for ImGuiTextFilter {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImGuiTextFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "ImGuiTextFilter {{ InputBuf: [{}], Filters: {:?}, CountGrep: {:?} }}",
            self.InputBuf
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>(),
            self.Filters,
            self.CountGrep
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextBuffer() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextBuffer>())).Buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextBuffer),
            "::",
            stringify!(Buf)
        )
    );
}
impl Default for ImGuiTextBuffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_ImGuiStoragePair__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiStoragePair__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStoragePair__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStoragePair__bindgen_ty_1>())).val_i as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStoragePair__bindgen_ty_1>())).val_f as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStoragePair__bindgen_ty_1>())).val_p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_p)
        )
    );
}
impl Default for ImGuiStoragePair__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImGuiStoragePair__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ImGuiStoragePair__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ImGuiStoragePair() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStoragePair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStoragePair>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair),
            "::",
            stringify!(key)
        )
    );
}
impl Default for ImGuiStoragePair {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImGuiStoragePair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "ImGuiStoragePair {{ key: {:?}, __bindgen_anon_1: {:?} }}",
            self.key, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiStorage {
    pub Data: ImVector_ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImGuiStorage() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStorage>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImGuiStorage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTabBar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabBar,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTabBar() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTabBar>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTabBar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabBar>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabBar>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabBar>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Data)
        )
    );
}
impl Default for ImVector_ImGuiTabBar {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPool_ImGuiTabBar {
    pub Buf: ImVector_ImGuiTabBar,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImGuiTabBar() {
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImGuiTabBar>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImGuiTabBar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImPool_ImGuiTabBar>())).Buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImPool_ImGuiTabBar>())).Map as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImPool_ImGuiTabBar>())).FreeIdx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(FreeIdx)
        )
    );
}
impl Default for ImPool_ImGuiTabBar {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiListClipper {
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub StepNo: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f32,
}
#[test]
fn bindgen_test_layout_ImGuiListClipper() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipper>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipper>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).DisplayStart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(DisplayStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).DisplayEnd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(DisplayEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).ItemsCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).StepNo as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(StepNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).ItemsHeight as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).StartPosY as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(StartPosY)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImColor {
    pub Value: ImVec4,
}
#[test]
fn bindgen_test_layout_ImColor() {
    assert_eq!(
        ::std::mem::size_of::<ImColor>(),
        16usize,
        concat!("Size of: ", stringify!(ImColor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImColor>(),
        4usize,
        concat!("Alignment of ", stringify!(ImColor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImColor>())).Value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImColor),
            "::",
            stringify!(Value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImDrawCmd() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmd>(),
        56usize,
        concat!("Size of: ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).ClipRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).TextureId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(TextureId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).VtxOffset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(VtxOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).IdxOffset as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(IdxOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).ElemCount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(ElemCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).UserCallback as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(UserCallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).UserCallbackData as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(UserCallbackData)
        )
    );
}
impl Default for ImDrawCmd {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[test]
fn bindgen_test_layout_ImDrawVert() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawVert>(),
        20usize,
        concat!("Size of: ", stringify!(ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawVert>(),
        4usize,
        concat!("Alignment of ", stringify!(ImDrawVert))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawVert>())).pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawVert>())).uv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawVert>())).col as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(col)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector_ImDrawCmd,
    pub _IdxBuffer: ImVector_ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImDrawChannel() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawChannel>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawChannel>()))._CmdBuffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel),
            "::",
            stringify!(_CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawChannel>()))._IdxBuffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel),
            "::",
            stringify!(_IdxBuffer)
        )
    );
}
impl Default for ImDrawChannel {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImDrawListSplitter {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector_ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImDrawListSplitter() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSplitter>(),
        24usize,
        concat!("Size of: ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSplitter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Current as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Channels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Channels)
        )
    );
}
impl Default for ImDrawListSplitter {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ImDrawCornerFlags_None: ImDrawCornerFlags_ = 0;
pub const ImDrawCornerFlags_TopLeft: ImDrawCornerFlags_ = 1;
pub const ImDrawCornerFlags_TopRight: ImDrawCornerFlags_ = 2;
pub const ImDrawCornerFlags_BotLeft: ImDrawCornerFlags_ = 4;
pub const ImDrawCornerFlags_BotRight: ImDrawCornerFlags_ = 8;
pub const ImDrawCornerFlags_Top: ImDrawCornerFlags_ = 3;
pub const ImDrawCornerFlags_Bot: ImDrawCornerFlags_ = 12;
pub const ImDrawCornerFlags_Left: ImDrawCornerFlags_ = 5;
pub const ImDrawCornerFlags_Right: ImDrawCornerFlags_ = 10;
pub const ImDrawCornerFlags_All: ImDrawCornerFlags_ = 15;
pub type ImDrawCornerFlags_ = ::std::os::raw::c_uint;
pub const ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImDrawList {
    pub CmdBuffer: ImVector_ImDrawCmd,
    pub IdxBuffer: ImVector_ImDrawIdx,
    pub VtxBuffer: ImVector_ImDrawVert,
    pub Flags: ImDrawListFlags,
    pub _Data: *const ImDrawListSharedData,
    pub _OwnerName: *const ::std::os::raw::c_char,
    pub _VtxCurrentIdx: ::std::os::raw::c_uint,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _ClipRectStack: ImVector_ImVec4,
    pub _TextureIdStack: ImVector_ImTextureID,
    pub _Path: ImVector_ImVec2,
    pub _CmdHeader: ImDrawCmd,
    pub _Splitter: ImDrawListSplitter,
}
#[test]
fn bindgen_test_layout_ImDrawList() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawList>(),
        224usize,
        concat!("Size of: ", stringify!(ImDrawList))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawList>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).CmdBuffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).IdxBuffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(IdxBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).VtxBuffer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(VtxBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).Flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._OwnerName as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_OwnerName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._VtxCurrentIdx as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_VtxCurrentIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._VtxWritePtr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_VtxWritePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._IdxWritePtr as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_IdxWritePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._ClipRectStack as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_ClipRectStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._TextureIdStack as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_TextureIdStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Path as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._CmdHeader as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_CmdHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Splitter as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Splitter)
        )
    );
}
impl Default for ImDrawList {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImDrawData {
    pub Valid: bool,
    pub CmdLists: *mut *mut ImDrawList,
    pub CmdListsCount: ::std::os::raw::c_int,
    pub TotalIdxCount: ::std::os::raw::c_int,
    pub TotalVtxCount: ::std::os::raw::c_int,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
    pub OwnerViewport: *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImDrawData() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawData>(),
        64usize,
        concat!("Size of: ", stringify!(ImDrawData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).Valid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(Valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).CmdLists as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(CmdLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).CmdListsCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(CmdListsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).TotalIdxCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(TotalIdxCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).TotalVtxCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(TotalVtxCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).DisplayPos as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(DisplayPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).DisplaySize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).FramebufferScale as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(FramebufferScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).OwnerViewport as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(OwnerViewport)
        )
    );
}
impl Default for ImDrawData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImFontConfig {
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub FontNo: ::std::os::raw::c_int,
    pub SizePixels: f32,
    pub OversampleH: ::std::os::raw::c_int,
    pub OversampleV: ::std::os::raw::c_int,
    pub PixelSnapH: bool,
    pub GlyphExtraSpacing: ImVec2,
    pub GlyphOffset: ImVec2,
    pub GlyphRanges: *const ImWchar,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub MergeMode: bool,
    pub RasterizerFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub EllipsisChar: ImWchar,
    pub Name: [::std::os::raw::c_char; 40usize],
    pub DstFont: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontConfig() {
    assert_eq!(
        ::std::mem::size_of::<ImFontConfig>(),
        136usize,
        concat!("Size of: ", stringify!(ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontDataSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontDataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImFontConfig>())).FontDataOwnedByAtlas as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontDataOwnedByAtlas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontNo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).SizePixels as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(SizePixels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).OversampleH as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(OversampleH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).OversampleV as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(OversampleV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).PixelSnapH as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(PixelSnapH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphExtraSpacing as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphExtraSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphOffset as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphRanges as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphRanges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphMinAdvanceX as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphMinAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphMaxAdvanceX as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphMaxAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).MergeMode as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(MergeMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).RasterizerFlags as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(RasterizerFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).RasterizerMultiply as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(RasterizerMultiply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).EllipsisChar as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).Name as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).DstFont as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(DstFont)
        )
    );
}
impl Default for ImFontConfig {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImFontConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ImFontConfig {{ FontData: {:?}, FontDataSize: {:?}, FontDataOwnedByAtlas: {:?}, FontNo: {:?}, SizePixels: {:?}, OversampleH: {:?}, OversampleV: {:?}, PixelSnapH: {:?}, GlyphExtraSpacing: {:?}, GlyphOffset: {:?}, GlyphRanges: {:?}, GlyphMinAdvanceX: {:?}, GlyphMaxAdvanceX: {:?}, MergeMode: {:?}, RasterizerFlags: {:?}, RasterizerMultiply: {:?}, EllipsisChar: {:?}, Name: [{}], DstFont: {:?} }}" , self . FontData , self . FontDataSize , self . FontDataOwnedByAtlas , self . FontNo , self . SizePixels , self . OversampleH , self . OversampleV , self . PixelSnapH , self . GlyphExtraSpacing , self . GlyphOffset , self . GlyphRanges , self . GlyphMinAdvanceX , self . GlyphMaxAdvanceX , self . MergeMode , self . RasterizerFlags , self . RasterizerMultiply , self . EllipsisChar , self . Name . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > () , self . DstFont)
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImFontGlyph {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
}
#[test]
fn bindgen_test_layout_ImFontGlyph() {
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyph>(),
        40usize,
        concat!("Size of: ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyph>(),
        4usize,
        concat!("Alignment of ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).AdvanceX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(AdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).X0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(X0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Y0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(Y0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).X1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(X1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Y1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(Y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).U0 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(U0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).V0 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(V0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).U1 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(U1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).V1 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(V1)
        )
    );
}
impl ImFontGlyph {
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Codepoint: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImFontGlyphRangesBuilder {
    pub UsedChars: ImVector_ImU32,
}
#[test]
fn bindgen_test_layout_ImFontGlyphRangesBuilder() {
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyphRangesBuilder>(),
        16usize,
        concat!("Size of: ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyphRangesBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImFontGlyphRangesBuilder>())).UsedChars as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyphRangesBuilder),
            "::",
            stringify!(UsedChars)
        )
    );
}
impl Default for ImFontGlyphRangesBuilder {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImFontAtlasCustomRect {
    pub Width: ::std::os::raw::c_ushort,
    pub Height: ::std::os::raw::c_ushort,
    pub X: ::std::os::raw::c_ushort,
    pub Y: ::std::os::raw::c_ushort,
    pub GlyphID: ::std::os::raw::c_uint,
    pub GlyphAdvanceX: f32,
    pub GlyphOffset: ImVec2,
    pub Font: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontAtlasCustomRect() {
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlasCustomRect>(),
        32usize,
        concat!("Size of: ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Height as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).X as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Y as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphAdvanceX as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphAdvanceX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphOffset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Font as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Font)
        )
    );
}
impl Default for ImFontAtlasCustomRect {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImFontAtlas {
    pub Locked: bool,
    pub Flags: ImFontAtlasFlags,
    pub TexID: ImTextureID,
    pub TexDesiredWidth: ::std::os::raw::c_int,
    pub TexGlyphPadding: ::std::os::raw::c_int,
    pub TexPixelsAlpha8: *mut ::std::os::raw::c_uchar,
    pub TexPixelsRGBA32: *mut ::std::os::raw::c_uint,
    pub TexWidth: ::std::os::raw::c_int,
    pub TexHeight: ::std::os::raw::c_int,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector_ImFontPtr,
    pub CustomRects: ImVector_ImFontAtlasCustomRect,
    pub ConfigData: ImVector_ImFontConfig,
    pub TexUvLines: [ImVec4; 64usize],
    pub PackIdMouseCursors: ::std::os::raw::c_int,
    pub PackIdLines: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImFontAtlas() {
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlas>(),
        1144usize,
        concat!("Size of: ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlas>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Locked as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Locked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexDesiredWidth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexDesiredWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexGlyphPadding as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexGlyphPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsAlpha8 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsAlpha8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsRGBA32 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsRGBA32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexWidth as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexHeight as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvScale as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvWhitePixel as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvWhitePixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Fonts as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Fonts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).CustomRects as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(CustomRects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).ConfigData as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvLines as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvLines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).PackIdMouseCursors as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(PackIdMouseCursors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).PackIdLines as *const _ as usize },
        1140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(PackIdLines)
        )
    );
}
impl Default for ImFontAtlas {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImFontAtlas {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ImFontAtlas {{ Locked: {:?}, Flags: {:?}, TexID: {:?}, TexDesiredWidth: {:?}, TexGlyphPadding: {:?}, TexPixelsAlpha8: {:?}, TexPixelsRGBA32: {:?}, TexWidth: {:?}, TexHeight: {:?}, TexUvScale: {:?}, TexUvWhitePixel: {:?}, Fonts: {:?}, CustomRects: {:?}, ConfigData: {:?}, TexUvLines: [{}], PackIdMouseCursors: {:?}, PackIdLines: {:?} }}" , self . Locked , self . Flags , self . TexID , self . TexDesiredWidth , self . TexGlyphPadding , self . TexPixelsAlpha8 , self . TexPixelsRGBA32 , self . TexWidth , self . TexHeight , self . TexUvScale , self . TexUvWhitePixel , self . Fonts , self . CustomRects , self . ConfigData , self . TexUvLines . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > () , self . PackIdMouseCursors , self . PackIdLines)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImFont {
    pub IndexAdvanceX: ImVector_float,
    pub FallbackAdvanceX: f32,
    pub FontSize: f32,
    pub IndexLookup: ImVector_ImWchar,
    pub Glyphs: ImVector_ImFontGlyph,
    pub FallbackGlyph: *const ImFontGlyph,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub ConfigData: *const ImFontConfig,
    pub ConfigDataCount: ::std::os::raw::c_short,
    pub FallbackChar: ImWchar,
    pub EllipsisChar: ImWchar,
    pub DirtyLookupTables: bool,
    pub Scale: f32,
    pub Ascent: f32,
    pub Descent: f32,
    pub MetricsTotalSurface: ::std::os::raw::c_int,
    pub Used4kPagesMap: [ImU8; 2usize],
}
#[test]
fn bindgen_test_layout_ImFont() {
    assert_eq!(
        ::std::mem::size_of::<ImFont>(),
        112usize,
        concat!("Size of: ", stringify!(ImFont))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFont>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFont))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).IndexAdvanceX as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(IndexAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackAdvanceX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FontSize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).IndexLookup as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(IndexLookup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Glyphs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Glyphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackGlyph as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackGlyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).ContainerAtlas as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ContainerAtlas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).ConfigData as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).ConfigDataCount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ConfigDataCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackChar as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).EllipsisChar as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).DirtyLookupTables as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(DirtyLookupTables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Scale as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Ascent as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Ascent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Descent as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Descent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).MetricsTotalSurface as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(MetricsTotalSurface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Used4kPagesMap as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Used4kPagesMap)
        )
    );
}
impl Default for ImFont {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiPlatformIO {
    pub Platform_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::std::os::raw::c_char),
    >,
    pub Platform_SetWindowAlpha:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_GetWindowDpiScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetImeInputPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        unsafe extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::std::os::raw::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::std::os::raw::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Renderer_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Monitors: ImVector_ImGuiPlatformMonitor,
    pub MainViewport: *mut ImGuiViewport,
    pub Viewports: ImVector_ImGuiViewportPtr,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformIO() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformIO>(),
        232usize,
        concat!("Size of: ", stringify!(ImGuiPlatformIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformIO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_CreateWindow as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_CreateWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_DestroyWindow as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_DestroyWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_ShowWindow as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_ShowWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetWindowPos as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_GetWindowPos as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetWindowSize as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_GetWindowSize as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetWindowFocus as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowFocus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_GetWindowFocus as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowFocus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_GetWindowMinimized as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowMinimized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetWindowTitle as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowTitle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetWindowAlpha as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_UpdateWindow as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_UpdateWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_RenderWindow as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_RenderWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SwapBuffers as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SwapBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_GetWindowDpiScale as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowDpiScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_OnChangedViewport as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_OnChangedViewport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetImeInputPos as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetImeInputPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_CreateVkSurface as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_CreateVkSurface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Renderer_CreateWindow as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_CreateWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Renderer_DestroyWindow as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_DestroyWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Renderer_SetWindowSize as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_SetWindowSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Renderer_RenderWindow as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_RenderWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiPlatformIO>())).Renderer_SwapBuffers as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_SwapBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Monitors as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Monitors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).MainViewport as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(MainViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Viewports as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Viewports)
        )
    );
}
impl Default for ImGuiPlatformIO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiPlatformMonitor {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformMonitor() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformMonitor>(),
        36usize,
        concat!("Size of: ", stringify!(ImGuiPlatformMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformMonitor>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformMonitor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformMonitor>())).MainPos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(MainPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformMonitor>())).MainSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(MainSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformMonitor>())).WorkPos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(WorkPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformMonitor>())).WorkSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(WorkSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformMonitor>())).DpiScale as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(DpiScale)
        )
    );
}
pub const ImGuiViewportFlags_None: ImGuiViewportFlags_ = 0;
pub const ImGuiViewportFlags_NoDecoration: ImGuiViewportFlags_ = 1;
pub const ImGuiViewportFlags_NoTaskBarIcon: ImGuiViewportFlags_ = 2;
pub const ImGuiViewportFlags_NoFocusOnAppearing: ImGuiViewportFlags_ = 4;
pub const ImGuiViewportFlags_NoFocusOnClick: ImGuiViewportFlags_ = 8;
pub const ImGuiViewportFlags_NoInputs: ImGuiViewportFlags_ = 16;
pub const ImGuiViewportFlags_NoRendererClear: ImGuiViewportFlags_ = 32;
pub const ImGuiViewportFlags_TopMost: ImGuiViewportFlags_ = 64;
pub const ImGuiViewportFlags_Minimized: ImGuiViewportFlags_ = 128;
pub const ImGuiViewportFlags_NoAutoMerge: ImGuiViewportFlags_ = 256;
pub const ImGuiViewportFlags_CanHostOtherWindows: ImGuiViewportFlags_ = 512;
pub type ImGuiViewportFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiViewport {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub WorkOffsetMin: ImVec2,
    pub WorkOffsetMax: ImVec2,
    pub DpiScale: f32,
    pub DrawData: *mut ImDrawData,
    pub ParentViewportId: ImGuiID,
    pub RendererUserData: *mut ::std::os::raw::c_void,
    pub PlatformUserData: *mut ::std::os::raw::c_void,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
    pub PlatformHandleRaw: *mut ::std::os::raw::c_void,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiViewport() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiViewport>(),
        104usize,
        concat!("Size of: ", stringify!(ImGuiViewport))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiViewport>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiViewport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).Pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).Size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).WorkOffsetMin as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(WorkOffsetMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).WorkOffsetMax as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(WorkOffsetMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).DpiScale as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(DpiScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).DrawData as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(DrawData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).ParentViewportId as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(ParentViewportId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).RendererUserData as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(RendererUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).PlatformUserData as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).PlatformHandle as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).PlatformHandleRaw as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformHandleRaw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiViewport>())).PlatformRequestMove as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestMove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiViewport>())).PlatformRequestResize as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestResize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiViewport>())).PlatformRequestClose as *const _ as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestClose)
        )
    );
}
impl Default for ImGuiViewport {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct StbUndoRecord {
    pub where_: ::std::os::raw::c_int,
    pub insert_length: ::std::os::raw::c_int,
    pub delete_length: ::std::os::raw::c_int,
    pub char_storage: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StbUndoRecord() {
    assert_eq!(
        ::std::mem::size_of::<StbUndoRecord>(),
        16usize,
        concat!("Size of: ", stringify!(StbUndoRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<StbUndoRecord>(),
        4usize,
        concat!("Alignment of ", stringify!(StbUndoRecord))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoRecord>())).where_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(where_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoRecord>())).insert_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(insert_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoRecord>())).delete_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(delete_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoRecord>())).char_storage as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(char_storage)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StbUndoState {
    pub undo_rec: [StbUndoRecord; 99usize],
    pub undo_char: [ImWchar; 999usize],
    pub undo_point: ::std::os::raw::c_short,
    pub redo_point: ::std::os::raw::c_short,
    pub undo_char_point: ::std::os::raw::c_int,
    pub redo_char_point: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StbUndoState() {
    assert_eq!(
        ::std::mem::size_of::<StbUndoState>(),
        3596usize,
        concat!("Size of: ", stringify!(StbUndoState))
    );
    assert_eq!(
        ::std::mem::align_of::<StbUndoState>(),
        4usize,
        concat!("Alignment of ", stringify!(StbUndoState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).undo_rec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_rec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).undo_char as *const _ as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).undo_point as *const _ as usize },
        3582usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).redo_point as *const _ as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(redo_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).undo_char_point as *const _ as usize },
        3588usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_char_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).redo_char_point as *const _ as usize },
        3592usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(redo_char_point)
        )
    );
}
impl Default for StbUndoState {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for StbUndoState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "StbUndoState {{ undo_rec: [{}], undo_char: [{}], undo_point: {:?}, redo_point: {:?}, undo_char_point: {:?}, redo_char_point: {:?} }}" , self . undo_rec . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > () , self . undo_char . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > () , self . undo_point , self . redo_point , self . undo_char_point , self . redo_char_point)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct STB_TexteditState {
    pub cursor: ::std::os::raw::c_int,
    pub select_start: ::std::os::raw::c_int,
    pub select_end: ::std::os::raw::c_int,
    pub insert_mode: ::std::os::raw::c_uchar,
    pub row_count_per_page: ::std::os::raw::c_int,
    pub cursor_at_end_of_line: ::std::os::raw::c_uchar,
    pub initialized: ::std::os::raw::c_uchar,
    pub has_preferred_x: ::std::os::raw::c_uchar,
    pub single_line: ::std::os::raw::c_uchar,
    pub padding1: ::std::os::raw::c_uchar,
    pub padding2: ::std::os::raw::c_uchar,
    pub padding3: ::std::os::raw::c_uchar,
    pub preferred_x: f32,
    pub undostate: StbUndoState,
}
#[test]
fn bindgen_test_layout_STB_TexteditState() {
    assert_eq!(
        ::std::mem::size_of::<STB_TexteditState>(),
        3628usize,
        concat!("Size of: ", stringify!(STB_TexteditState))
    );
    assert_eq!(
        ::std::mem::align_of::<STB_TexteditState>(),
        4usize,
        concat!("Alignment of ", stringify!(STB_TexteditState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).cursor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).select_start as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(select_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).select_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(select_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).insert_mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(insert_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<STB_TexteditState>())).row_count_per_page as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(row_count_per_page)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<STB_TexteditState>())).cursor_at_end_of_line as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(cursor_at_end_of_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).initialized as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<STB_TexteditState>())).has_preferred_x as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(has_preferred_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).single_line as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(single_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).padding1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).padding2 as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).padding3 as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).preferred_x as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(preferred_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).undostate as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(undostate)
        )
    );
}
impl Default for STB_TexteditState {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for STB_TexteditState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "STB_TexteditState {{ cursor: {:?}, select_start: {:?}, select_end: {:?}, insert_mode: {:?}, row_count_per_page: {:?}, cursor_at_end_of_line: {:?}, initialized: {:?}, has_preferred_x: {:?}, single_line: {:?}, padding1: {:?}, padding2: {:?}, padding3: {:?}, preferred_x: {:?}, undostate: {:?} }}" , self . cursor , self . select_start , self . select_end , self . insert_mode , self . row_count_per_page , self . cursor_at_end_of_line , self . initialized , self . has_preferred_x , self . single_line , self . padding1 , self . padding2 , self . padding3 , self . preferred_x , self . undostate)
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct StbTexteditRow {
    pub x0: f32,
    pub x1: f32,
    pub baseline_y_delta: f32,
    pub ymin: f32,
    pub ymax: f32,
    pub num_chars: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StbTexteditRow() {
    assert_eq!(
        ::std::mem::size_of::<StbTexteditRow>(),
        24usize,
        concat!("Size of: ", stringify!(StbTexteditRow))
    );
    assert_eq!(
        ::std::mem::align_of::<StbTexteditRow>(),
        4usize,
        concat!("Alignment of ", stringify!(StbTexteditRow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).x0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(x0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).x1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).baseline_y_delta as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(baseline_y_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).ymin as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(ymin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).ymax as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(ymax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).num_chars as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(num_chars)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImVec1 {
    pub x: f32,
}
#[test]
fn bindgen_test_layout_ImVec1() {
    assert_eq!(
        ::std::mem::size_of::<ImVec1>(),
        4usize,
        concat!("Size of: ", stringify!(ImVec1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec1>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec1), "::", stringify!(x))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVec2ih {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_ImVec2ih() {
    assert_eq!(
        ::std::mem::size_of::<ImVec2ih>(),
        4usize,
        concat!("Size of: ", stringify!(ImVec2ih))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2ih>(),
        2usize,
        concat!("Alignment of ", stringify!(ImVec2ih))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2ih>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec2ih),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2ih>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec2ih),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImRect {
    pub Min: ImVec2,
    pub Max: ImVec2,
}
#[test]
fn bindgen_test_layout_ImRect() {
    assert_eq!(
        ::std::mem::size_of::<ImRect>(),
        16usize,
        concat!("Size of: ", stringify!(ImRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImRect>(),
        4usize,
        concat!("Alignment of ", stringify!(ImRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImRect>())).Min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImRect),
            "::",
            stringify!(Min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImRect>())).Max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImRect),
            "::",
            stringify!(Max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImBitVector {
    pub Storage: ImVector_ImU32,
}
#[test]
fn bindgen_test_layout_ImBitVector() {
    assert_eq!(
        ::std::mem::size_of::<ImBitVector>(),
        16usize,
        concat!("Size of: ", stringify!(ImBitVector))
    );
    assert_eq!(
        ::std::mem::align_of::<ImBitVector>(),
        8usize,
        concat!("Alignment of ", stringify!(ImBitVector))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImBitVector>())).Storage as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImBitVector),
            "::",
            stringify!(Storage)
        )
    );
}
impl Default for ImBitVector {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImDrawListSharedData {
    pub TexUvWhitePixel: ImVec2,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub ClipRectFullscreen: ImVec4,
    pub InitialFlags: ImDrawListFlags,
    pub ArcFastVtx: [ImVec2; 12usize],
    pub CircleSegmentCounts: [ImU8; 64usize],
    pub TexUvLines: *const ImVec4,
}
#[test]
fn bindgen_test_layout_ImDrawListSharedData() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSharedData>(),
        216usize,
        concat!("Size of: ", stringify!(ImDrawListSharedData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSharedData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSharedData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).TexUvWhitePixel as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(TexUvWhitePixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).Font as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(Font)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).FontSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).CurveTessellationTol as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CurveTessellationTol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).CircleSegmentMaxError as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CircleSegmentMaxError)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).ClipRectFullscreen as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(ClipRectFullscreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).InitialFlags as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(InitialFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).ArcFastVtx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(ArcFastVtx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).CircleSegmentCounts as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CircleSegmentCounts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).TexUvLines as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(TexUvLines)
        )
    );
}
impl Default for ImDrawListSharedData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImDrawListSharedData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ImDrawListSharedData {{ TexUvWhitePixel: {:?}, Font: {:?}, FontSize: {:?}, CurveTessellationTol: {:?}, CircleSegmentMaxError: {:?}, ClipRectFullscreen: {:?}, InitialFlags: {:?}, ArcFastVtx: {:?}, CircleSegmentCounts: [{}], TexUvLines: {:?} }}" , self . TexUvWhitePixel , self . Font , self . FontSize , self . CurveTessellationTol , self . CircleSegmentMaxError , self . ClipRectFullscreen , self . InitialFlags , self . ArcFastVtx , self . CircleSegmentCounts . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > () , self . TexUvLines)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImDrawDataBuilder {
    pub Layers: [ImVector_ImDrawListPtr; 2usize],
}
#[test]
fn bindgen_test_layout_ImDrawDataBuilder() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawDataBuilder>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawDataBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawDataBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawDataBuilder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawDataBuilder>())).Layers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawDataBuilder),
            "::",
            stringify!(Layers)
        )
    );
}
impl Default for ImDrawDataBuilder {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ImGuiItemFlags_None: ImGuiItemFlags_ = 0;
pub const ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = 1;
pub const ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = 2;
pub const ImGuiItemFlags_Disabled: ImGuiItemFlags_ = 4;
pub const ImGuiItemFlags_NoNav: ImGuiItemFlags_ = 8;
pub const ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = 16;
pub const ImGuiItemFlags_SelectableDontClosePopup: ImGuiItemFlags_ = 32;
pub const ImGuiItemFlags_MixedValue: ImGuiItemFlags_ = 64;
pub const ImGuiItemFlags_ReadOnly: ImGuiItemFlags_ = 128;
pub const ImGuiItemFlags_Default_: ImGuiItemFlags_ = 0;
pub type ImGuiItemFlags_ = ::std::os::raw::c_uint;
pub const ImGuiItemStatusFlags_None: ImGuiItemStatusFlags_ = 0;
pub const ImGuiItemStatusFlags_HoveredRect: ImGuiItemStatusFlags_ = 1;
pub const ImGuiItemStatusFlags_HasDisplayRect: ImGuiItemStatusFlags_ = 2;
pub const ImGuiItemStatusFlags_Edited: ImGuiItemStatusFlags_ = 4;
pub const ImGuiItemStatusFlags_ToggledSelection: ImGuiItemStatusFlags_ = 8;
pub const ImGuiItemStatusFlags_ToggledOpen: ImGuiItemStatusFlags_ = 16;
pub const ImGuiItemStatusFlags_HasDeactivated: ImGuiItemStatusFlags_ = 32;
pub const ImGuiItemStatusFlags_Deactivated: ImGuiItemStatusFlags_ = 64;
pub type ImGuiItemStatusFlags_ = ::std::os::raw::c_uint;
pub const ImGuiButtonFlags_PressedOnClick: ImGuiButtonFlagsPrivate_ = 16;
pub const ImGuiButtonFlags_PressedOnClickRelease: ImGuiButtonFlagsPrivate_ = 32;
pub const ImGuiButtonFlags_PressedOnClickReleaseAnywhere: ImGuiButtonFlagsPrivate_ = 64;
pub const ImGuiButtonFlags_PressedOnRelease: ImGuiButtonFlagsPrivate_ = 128;
pub const ImGuiButtonFlags_PressedOnDoubleClick: ImGuiButtonFlagsPrivate_ = 256;
pub const ImGuiButtonFlags_PressedOnDragDropHold: ImGuiButtonFlagsPrivate_ = 512;
pub const ImGuiButtonFlags_Repeat: ImGuiButtonFlagsPrivate_ = 1024;
pub const ImGuiButtonFlags_FlattenChildren: ImGuiButtonFlagsPrivate_ = 2048;
pub const ImGuiButtonFlags_AllowItemOverlap: ImGuiButtonFlagsPrivate_ = 4096;
pub const ImGuiButtonFlags_DontClosePopups: ImGuiButtonFlagsPrivate_ = 8192;
pub const ImGuiButtonFlags_Disabled: ImGuiButtonFlagsPrivate_ = 16384;
pub const ImGuiButtonFlags_AlignTextBaseLine: ImGuiButtonFlagsPrivate_ = 32768;
pub const ImGuiButtonFlags_NoKeyModifiers: ImGuiButtonFlagsPrivate_ = 65536;
pub const ImGuiButtonFlags_NoHoldingActiveId: ImGuiButtonFlagsPrivate_ = 131072;
pub const ImGuiButtonFlags_NoNavFocus: ImGuiButtonFlagsPrivate_ = 262144;
pub const ImGuiButtonFlags_NoHoveredOnFocus: ImGuiButtonFlagsPrivate_ = 524288;
pub const ImGuiButtonFlags_PressedOnMask_: ImGuiButtonFlagsPrivate_ = 1008;
pub const ImGuiButtonFlags_PressedOnDefault_: ImGuiButtonFlagsPrivate_ = 32;
pub type ImGuiButtonFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiSliderFlags_Vertical: ImGuiSliderFlagsPrivate_ = 1048576;
pub const ImGuiSliderFlags_ReadOnly: ImGuiSliderFlagsPrivate_ = 2097152;
pub type ImGuiSliderFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiSelectableFlags_NoHoldingActiveID: ImGuiSelectableFlagsPrivate_ = 1048576;
pub const ImGuiSelectableFlags_SelectOnClick: ImGuiSelectableFlagsPrivate_ = 2097152;
pub const ImGuiSelectableFlags_SelectOnRelease: ImGuiSelectableFlagsPrivate_ = 4194304;
pub const ImGuiSelectableFlags_SpanAvailWidth: ImGuiSelectableFlagsPrivate_ = 8388608;
pub const ImGuiSelectableFlags_DrawHoveredWhenHeld: ImGuiSelectableFlagsPrivate_ = 16777216;
pub const ImGuiSelectableFlags_SetNavIdOnHover: ImGuiSelectableFlagsPrivate_ = 33554432;
pub const ImGuiSelectableFlags_NoPadWithHalfSpacing: ImGuiSelectableFlagsPrivate_ = 67108864;
pub type ImGuiSelectableFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiTreeNodeFlags_ClipLabelForTrailingButton: ImGuiTreeNodeFlagsPrivate_ = 1048576;
pub type ImGuiTreeNodeFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiSeparatorFlags_None: ImGuiSeparatorFlags_ = 0;
pub const ImGuiSeparatorFlags_Horizontal: ImGuiSeparatorFlags_ = 1;
pub const ImGuiSeparatorFlags_Vertical: ImGuiSeparatorFlags_ = 2;
pub const ImGuiSeparatorFlags_SpanAllColumns: ImGuiSeparatorFlags_ = 4;
pub type ImGuiSeparatorFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTextFlags_None: ImGuiTextFlags_ = 0;
pub const ImGuiTextFlags_NoWidthForLargeClippedText: ImGuiTextFlags_ = 1;
pub type ImGuiTextFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTooltipFlags_None: ImGuiTooltipFlags_ = 0;
pub const ImGuiTooltipFlags_OverridePreviousTooltip: ImGuiTooltipFlags_ = 1;
pub type ImGuiTooltipFlags_ = ::std::os::raw::c_uint;
pub const ImGuiLayoutType_Horizontal: ImGuiLayoutType_ = 0;
pub const ImGuiLayoutType_Vertical: ImGuiLayoutType_ = 1;
pub type ImGuiLayoutType_ = ::std::os::raw::c_uint;
pub const ImGuiLogType_None: ImGuiLogType = 0;
pub const ImGuiLogType_TTY: ImGuiLogType = 1;
pub const ImGuiLogType_File: ImGuiLogType = 2;
pub const ImGuiLogType_Buffer: ImGuiLogType = 3;
pub const ImGuiLogType_Clipboard: ImGuiLogType = 4;
pub type ImGuiLogType = ::std::os::raw::c_uint;
pub const ImGuiAxis_None: ImGuiAxis = -1;
pub const ImGuiAxis_X: ImGuiAxis = 0;
pub const ImGuiAxis_Y: ImGuiAxis = 1;
pub type ImGuiAxis = ::std::os::raw::c_int;
pub const ImGuiPlotType_Lines: ImGuiPlotType = 0;
pub const ImGuiPlotType_Histogram: ImGuiPlotType = 1;
pub type ImGuiPlotType = ::std::os::raw::c_uint;
pub const ImGuiInputSource_None: ImGuiInputSource = 0;
pub const ImGuiInputSource_Mouse: ImGuiInputSource = 1;
pub const ImGuiInputSource_Nav: ImGuiInputSource = 2;
pub const ImGuiInputSource_NavKeyboard: ImGuiInputSource = 3;
pub const ImGuiInputSource_NavGamepad: ImGuiInputSource = 4;
pub const ImGuiInputSource_COUNT: ImGuiInputSource = 5;
pub type ImGuiInputSource = ::std::os::raw::c_uint;
pub const ImGuiInputReadMode_Down: ImGuiInputReadMode = 0;
pub const ImGuiInputReadMode_Pressed: ImGuiInputReadMode = 1;
pub const ImGuiInputReadMode_Released: ImGuiInputReadMode = 2;
pub const ImGuiInputReadMode_Repeat: ImGuiInputReadMode = 3;
pub const ImGuiInputReadMode_RepeatSlow: ImGuiInputReadMode = 4;
pub const ImGuiInputReadMode_RepeatFast: ImGuiInputReadMode = 5;
pub type ImGuiInputReadMode = ::std::os::raw::c_uint;
pub const ImGuiNavHighlightFlags_None: ImGuiNavHighlightFlags_ = 0;
pub const ImGuiNavHighlightFlags_TypeDefault: ImGuiNavHighlightFlags_ = 1;
pub const ImGuiNavHighlightFlags_TypeThin: ImGuiNavHighlightFlags_ = 2;
pub const ImGuiNavHighlightFlags_AlwaysDraw: ImGuiNavHighlightFlags_ = 4;
pub const ImGuiNavHighlightFlags_NoRounding: ImGuiNavHighlightFlags_ = 8;
pub type ImGuiNavHighlightFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNavDirSourceFlags_None: ImGuiNavDirSourceFlags_ = 0;
pub const ImGuiNavDirSourceFlags_Keyboard: ImGuiNavDirSourceFlags_ = 1;
pub const ImGuiNavDirSourceFlags_PadDPad: ImGuiNavDirSourceFlags_ = 2;
pub const ImGuiNavDirSourceFlags_PadLStick: ImGuiNavDirSourceFlags_ = 4;
pub type ImGuiNavDirSourceFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNavMoveFlags_None: ImGuiNavMoveFlags_ = 0;
pub const ImGuiNavMoveFlags_LoopX: ImGuiNavMoveFlags_ = 1;
pub const ImGuiNavMoveFlags_LoopY: ImGuiNavMoveFlags_ = 2;
pub const ImGuiNavMoveFlags_WrapX: ImGuiNavMoveFlags_ = 4;
pub const ImGuiNavMoveFlags_WrapY: ImGuiNavMoveFlags_ = 8;
pub const ImGuiNavMoveFlags_AllowCurrentNavId: ImGuiNavMoveFlags_ = 16;
pub const ImGuiNavMoveFlags_AlsoScoreVisibleSet: ImGuiNavMoveFlags_ = 32;
pub const ImGuiNavMoveFlags_ScrollToEdge: ImGuiNavMoveFlags_ = 64;
pub type ImGuiNavMoveFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNavForward_None: ImGuiNavForward = 0;
pub const ImGuiNavForward_ForwardQueued: ImGuiNavForward = 1;
pub const ImGuiNavForward_ForwardActive: ImGuiNavForward = 2;
pub type ImGuiNavForward = ::std::os::raw::c_uint;
pub const ImGuiNavLayer_Main: ImGuiNavLayer = 0;
pub const ImGuiNavLayer_Menu: ImGuiNavLayer = 1;
pub const ImGuiNavLayer_COUNT: ImGuiNavLayer = 2;
pub type ImGuiNavLayer = ::std::os::raw::c_uint;
pub const ImGuiPopupPositionPolicy_Default: ImGuiPopupPositionPolicy = 0;
pub const ImGuiPopupPositionPolicy_ComboBox: ImGuiPopupPositionPolicy = 1;
pub const ImGuiPopupPositionPolicy_Tooltip: ImGuiPopupPositionPolicy = 2;
pub type ImGuiPopupPositionPolicy = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDataTypeTempStorage {
    pub Data: [ImU8; 8usize],
}
#[test]
fn bindgen_test_layout_ImGuiDataTypeTempStorage() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataTypeTempStorage>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiDataTypeTempStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataTypeTempStorage>(),
        1usize,
        concat!("Alignment of ", stringify!(ImGuiDataTypeTempStorage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeTempStorage>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeTempStorage),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDataTypeInfo {
    pub Size: usize,
    pub Name: *const ::std::os::raw::c_char,
    pub PrintFmt: *const ::std::os::raw::c_char,
    pub ScanFmt: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiDataTypeInfo() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataTypeInfo>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiDataTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDataTypeInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).Name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).PrintFmt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(PrintFmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).ScanFmt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(ScanFmt)
        )
    );
}
impl Default for ImGuiDataTypeInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ImGuiDataType_String: ImGuiDataTypePrivate_ = 11;
pub const ImGuiDataType_Pointer: ImGuiDataTypePrivate_ = 12;
pub const ImGuiDataType_ID: ImGuiDataTypePrivate_ = 13;
pub type ImGuiDataTypePrivate_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiColorMod {
    pub Col: ImGuiCol,
    pub BackupValue: ImVec4,
}
#[test]
fn bindgen_test_layout_ImGuiColorMod() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiColorMod>(),
        20usize,
        concat!("Size of: ", stringify!(ImGuiColorMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiColorMod>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiColorMod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColorMod>())).Col as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColorMod),
            "::",
            stringify!(Col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColorMod>())).BackupValue as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColorMod),
            "::",
            stringify!(BackupValue)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyleMod {
    pub VarIdx: ImGuiStyleVar,
    pub __bindgen_anon_1: ImGuiStyleMod__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStyleMod__bindgen_ty_1 {
    pub BackupInt: [::std::os::raw::c_int; 2usize],
    pub BackupFloat: [f32; 2usize],
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_ImGuiStyleMod__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyleMod__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiStyleMod__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyleMod__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyleMod__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyleMod__bindgen_ty_1>())).BackupInt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod__bindgen_ty_1),
            "::",
            stringify!(BackupInt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyleMod__bindgen_ty_1>())).BackupFloat as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod__bindgen_ty_1),
            "::",
            stringify!(BackupFloat)
        )
    );
}
impl Default for ImGuiStyleMod__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImGuiStyleMod__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ImGuiStyleMod__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ImGuiStyleMod() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyleMod>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiStyleMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyleMod>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyleMod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyleMod>())).VarIdx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod),
            "::",
            stringify!(VarIdx)
        )
    );
}
impl Default for ImGuiStyleMod {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImGuiStyleMod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "ImGuiStyleMod {{ VarIdx: {:?}, __bindgen_anon_1: {:?} }}",
            self.VarIdx, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiGroupData {
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupIndent: ImVec1,
    pub BackupGroupOffset: ImVec1,
    pub BackupCurrLineSize: ImVec2,
    pub BackupCurrLineTextBaseOffset: f32,
    pub BackupActiveIdIsAlive: ImGuiID,
    pub BackupActiveIdPreviousFrameIsAlive: bool,
    pub EmitItem: bool,
}
#[test]
fn bindgen_test_layout_ImGuiGroupData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiGroupData>(),
        44usize,
        concat!("Size of: ", stringify!(ImGuiGroupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiGroupData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiGroupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCursorPos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCursorPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCursorMaxPos as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCursorMaxPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupIndent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupIndent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupGroupOffset as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupGroupOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCurrLineSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCurrLineSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCurrLineTextBaseOffset as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCurrLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupActiveIdIsAlive as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupActiveIdIsAlive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupActiveIdPreviousFrameIsAlive
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupActiveIdPreviousFrameIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).EmitItem as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(EmitItem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiMenuColumns {
    pub Spacing: f32,
    pub Width: f32,
    pub NextWidth: f32,
    pub Pos: [f32; 3usize],
    pub NextWidths: [f32; 3usize],
}
#[test]
fn bindgen_test_layout_ImGuiMenuColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiMenuColumns>(),
        36usize,
        concat!("Size of: ", stringify!(ImGuiMenuColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiMenuColumns>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiMenuColumns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).Spacing as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(Spacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).Width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).NextWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(NextWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).Pos as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).NextWidths as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(NextWidths)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiInputTextState {
    pub ID: ImGuiID,
    pub CurLenW: ::std::os::raw::c_int,
    pub CurLenA: ::std::os::raw::c_int,
    pub TextW: ImVector_ImWchar,
    pub TextA: ImVector_char,
    pub InitialTextA: ImVector_char,
    pub TextAIsValid: bool,
    pub BufCapacityA: ::std::os::raw::c_int,
    pub ScrollX: f32,
    pub Stb: STB_TexteditState,
    pub CursorAnim: f32,
    pub CursorFollow: bool,
    pub SelectedAllMouseLock: bool,
    pub Edited: bool,
    pub UserFlags: ImGuiInputTextFlags,
    pub UserCallback: ImGuiInputTextCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextState() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextState>(),
        3736usize,
        concat!("Size of: ", stringify!(ImGuiInputTextState))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextState>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).CurLenW as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CurLenW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).CurLenA as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CurLenA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).TextW as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).TextA as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).InitialTextA as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(InitialTextA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).TextAIsValid as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextAIsValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).BufCapacityA as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(BufCapacityA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).ScrollX as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ScrollX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).Stb as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(Stb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).CursorAnim as *const _ as usize },
        3704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CursorAnim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).CursorFollow as *const _ as usize
        },
        3708usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CursorFollow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).SelectedAllMouseLock as *const _
                as usize
        },
        3709usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(SelectedAllMouseLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).Edited as *const _ as usize },
        3710usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(Edited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).UserFlags as *const _ as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(UserFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).UserCallback as *const _ as usize
        },
        3720usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(UserCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).UserCallbackData as *const _ as usize
        },
        3728usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(UserCallbackData)
        )
    );
}
impl Default for ImGuiInputTextState {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImGuiInputTextState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ImGuiInputTextState {{ ID: {:?}, CurLenW: {:?}, CurLenA: {:?}, TextW: {:?}, TextA: {:?}, InitialTextA: {:?}, TextAIsValid: {:?}, BufCapacityA: {:?}, ScrollX: {:?}, Stb: {:?}, CursorAnim: {:?}, CursorFollow: {:?}, SelectedAllMouseLock: {:?}, Edited: {:?}, UserFlags: {:?}, UserCallback: {:?}, UserCallbackData: {:?} }}" , self . ID , self . CurLenW , self . CurLenA , self . TextW , self . TextA , self . InitialTextA , self . TextAIsValid , self . BufCapacityA , self . ScrollX , self . Stb , self . CursorAnim , self . CursorFollow , self . SelectedAllMouseLock , self . Edited , self . UserFlags , self . UserCallback , self . UserCallbackData)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiPopupData {
    pub PopupId: ImGuiID,
    pub Window: *mut ImGuiWindow,
    pub SourceWindow: *mut ImGuiWindow,
    pub OpenFrameCount: ::std::os::raw::c_int,
    pub OpenParentId: ImGuiID,
    pub OpenPopupPos: ImVec2,
    pub OpenMousePos: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiPopupData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPopupData>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiPopupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPopupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPopupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).PopupId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(PopupId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).Window as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).SourceWindow as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(SourceWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenFrameCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenFrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenParentId as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenParentId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenPopupPos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenPopupPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenMousePos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenMousePos)
        )
    );
}
impl Default for ImGuiPopupData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiNavMoveResult {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub FocusScopeId: ImGuiID,
    pub DistBox: f32,
    pub DistCenter: f32,
    pub DistAxial: f32,
    pub RectRel: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiNavMoveResult() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNavMoveResult>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiNavMoveResult))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNavMoveResult>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNavMoveResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).Window as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).ID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).FocusScopeId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(FocusScopeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).DistBox as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(DistBox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).DistCenter as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(DistCenter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).DistAxial as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(DistAxial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).RectRel as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(RectRel)
        )
    );
}
impl Default for ImGuiNavMoveResult {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ImGuiNextWindowDataFlags_None: ImGuiNextWindowDataFlags_ = 0;
pub const ImGuiNextWindowDataFlags_HasPos: ImGuiNextWindowDataFlags_ = 1;
pub const ImGuiNextWindowDataFlags_HasSize: ImGuiNextWindowDataFlags_ = 2;
pub const ImGuiNextWindowDataFlags_HasContentSize: ImGuiNextWindowDataFlags_ = 4;
pub const ImGuiNextWindowDataFlags_HasCollapsed: ImGuiNextWindowDataFlags_ = 8;
pub const ImGuiNextWindowDataFlags_HasSizeConstraint: ImGuiNextWindowDataFlags_ = 16;
pub const ImGuiNextWindowDataFlags_HasFocus: ImGuiNextWindowDataFlags_ = 32;
pub const ImGuiNextWindowDataFlags_HasBgAlpha: ImGuiNextWindowDataFlags_ = 64;
pub const ImGuiNextWindowDataFlags_HasScroll: ImGuiNextWindowDataFlags_ = 128;
pub const ImGuiNextWindowDataFlags_HasViewport: ImGuiNextWindowDataFlags_ = 256;
pub const ImGuiNextWindowDataFlags_HasDock: ImGuiNextWindowDataFlags_ = 512;
pub const ImGuiNextWindowDataFlags_HasWindowClass: ImGuiNextWindowDataFlags_ = 1024;
pub type ImGuiNextWindowDataFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiNextWindowData {
    pub Flags: ImGuiNextWindowDataFlags,
    pub PosCond: ImGuiCond,
    pub SizeCond: ImGuiCond,
    pub CollapsedCond: ImGuiCond,
    pub DockCond: ImGuiCond,
    pub PosVal: ImVec2,
    pub PosPivotVal: ImVec2,
    pub SizeVal: ImVec2,
    pub ContentSizeVal: ImVec2,
    pub ScrollVal: ImVec2,
    pub PosUndock: bool,
    pub CollapsedVal: bool,
    pub SizeConstraintRect: ImRect,
    pub SizeCallback: ImGuiSizeCallback,
    pub SizeCallbackUserData: *mut ::std::os::raw::c_void,
    pub BgAlphaVal: f32,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub WindowClass: ImGuiWindowClass,
    pub MenuBarOffsetMinVal: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiNextWindowData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNextWindowData>(),
        144usize,
        concat!("Size of: ", stringify!(ImGuiNextWindowData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNextWindowData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNextWindowData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).Flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosCond as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeCond as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).CollapsedCond as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(CollapsedCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).DockCond as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(DockCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosVal as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosPivotVal as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosPivotVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeVal as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).ContentSizeVal as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ContentSizeVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).ScrollVal as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ScrollVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosUndock as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosUndock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).CollapsedVal as *const _ as usize
        },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(CollapsedVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeConstraintRect as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeConstraintRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeCallback as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeCallbackUserData as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCallbackUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).BgAlphaVal as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(BgAlphaVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).ViewportId as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ViewportId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).DockId as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(DockId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).WindowClass as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(WindowClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).MenuBarOffsetMinVal as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(MenuBarOffsetMinVal)
        )
    );
}
impl Default for ImGuiNextWindowData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ImGuiNextItemDataFlags_None: ImGuiNextItemDataFlags_ = 0;
pub const ImGuiNextItemDataFlags_HasWidth: ImGuiNextItemDataFlags_ = 1;
pub const ImGuiNextItemDataFlags_HasOpen: ImGuiNextItemDataFlags_ = 2;
pub type ImGuiNextItemDataFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiNextItemData {
    pub Flags: ImGuiNextItemDataFlags,
    pub Width: f32,
    pub FocusScopeId: ImGuiID,
    pub OpenCond: ImGuiCond,
    pub OpenVal: bool,
}
#[test]
fn bindgen_test_layout_ImGuiNextItemData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNextItemData>(),
        20usize,
        concat!("Size of: ", stringify!(ImGuiNextItemData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNextItemData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiNextItemData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).Flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).Width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).FocusScopeId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(FocusScopeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).OpenCond as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(OpenCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).OpenVal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(OpenVal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiShrinkWidthItem {
    pub Index: ::std::os::raw::c_int,
    pub Width: f32,
}
#[test]
fn bindgen_test_layout_ImGuiShrinkWidthItem() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiShrinkWidthItem>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiShrinkWidthItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiShrinkWidthItem>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiShrinkWidthItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiShrinkWidthItem>())).Index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiShrinkWidthItem),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiShrinkWidthItem>())).Width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiShrinkWidthItem),
            "::",
            stringify!(Width)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiPtrOrIndex {
    pub Ptr: *mut ::std::os::raw::c_void,
    pub Index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiPtrOrIndex() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPtrOrIndex>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiPtrOrIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPtrOrIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPtrOrIndex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPtrOrIndex>())).Ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPtrOrIndex),
            "::",
            stringify!(Ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPtrOrIndex>())).Index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPtrOrIndex),
            "::",
            stringify!(Index)
        )
    );
}
impl Default for ImGuiPtrOrIndex {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ImGuiColumnsFlags_None: ImGuiColumnsFlags_ = 0;
pub const ImGuiColumnsFlags_NoBorder: ImGuiColumnsFlags_ = 1;
pub const ImGuiColumnsFlags_NoResize: ImGuiColumnsFlags_ = 2;
pub const ImGuiColumnsFlags_NoPreserveWidths: ImGuiColumnsFlags_ = 4;
pub const ImGuiColumnsFlags_NoForceWithinWindow: ImGuiColumnsFlags_ = 8;
pub const ImGuiColumnsFlags_GrowParentContentsSize: ImGuiColumnsFlags_ = 16;
pub type ImGuiColumnsFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiColumnData {
    pub OffsetNorm: f32,
    pub OffsetNormBeforeResize: f32,
    pub Flags: ImGuiColumnsFlags,
    pub ClipRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiColumnData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiColumnData>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiColumnData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiColumnData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumnData>())).OffsetNorm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumnData),
            "::",
            stringify!(OffsetNorm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiColumnData>())).OffsetNormBeforeResize as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumnData),
            "::",
            stringify!(OffsetNormBeforeResize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumnData>())).Flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumnData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumnData>())).ClipRect as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumnData),
            "::",
            stringify!(ClipRect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiColumns {
    pub ID: ImGuiID,
    pub Flags: ImGuiColumnsFlags,
    pub IsFirstFrame: bool,
    pub IsBeingResized: bool,
    pub Current: ::std::os::raw::c_int,
    pub Count: ::std::os::raw::c_int,
    pub OffMinX: f32,
    pub OffMaxX: f32,
    pub LineMinY: f32,
    pub LineMaxY: f32,
    pub HostCursorPosY: f32,
    pub HostCursorMaxPosX: f32,
    pub HostInitialClipRect: ImRect,
    pub HostBackupClipRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub Columns: ImVector_ImGuiColumnData,
    pub Splitter: ImDrawListSplitter,
}
#[test]
fn bindgen_test_layout_ImGuiColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiColumns>(),
        136usize,
        concat!("Size of: ", stringify!(ImGuiColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiColumns>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiColumns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).IsFirstFrame as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(IsFirstFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).IsBeingResized as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(IsBeingResized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).Current as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(Current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).Count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).OffMinX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(OffMinX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).OffMaxX as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(OffMaxX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).LineMinY as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(LineMinY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).LineMaxY as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(LineMaxY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).HostCursorPosY as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(HostCursorPosY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).HostCursorMaxPosX as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(HostCursorMaxPosX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiColumns>())).HostInitialClipRect as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(HostInitialClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).HostBackupClipRect as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(HostBackupClipRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiColumns>())).HostBackupParentWorkRect as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(HostBackupParentWorkRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).Columns as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(Columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColumns>())).Splitter as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColumns),
            "::",
            stringify!(Splitter)
        )
    );
}
impl Default for ImGuiColumns {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ImGuiDockNodeFlags_DockSpace: ImGuiDockNodeFlagsPrivate_ = 1024;
pub const ImGuiDockNodeFlags_CentralNode: ImGuiDockNodeFlagsPrivate_ = 2048;
pub const ImGuiDockNodeFlags_NoTabBar: ImGuiDockNodeFlagsPrivate_ = 4096;
pub const ImGuiDockNodeFlags_HiddenTabBar: ImGuiDockNodeFlagsPrivate_ = 8192;
pub const ImGuiDockNodeFlags_NoWindowMenuButton: ImGuiDockNodeFlagsPrivate_ = 16384;
pub const ImGuiDockNodeFlags_NoCloseButton: ImGuiDockNodeFlagsPrivate_ = 32768;
pub const ImGuiDockNodeFlags_NoDocking: ImGuiDockNodeFlagsPrivate_ = 65536;
pub const ImGuiDockNodeFlags_NoDockingSplitMe: ImGuiDockNodeFlagsPrivate_ = 131072;
pub const ImGuiDockNodeFlags_NoDockingSplitOther: ImGuiDockNodeFlagsPrivate_ = 262144;
pub const ImGuiDockNodeFlags_NoDockingOverMe: ImGuiDockNodeFlagsPrivate_ = 524288;
pub const ImGuiDockNodeFlags_NoDockingOverOther: ImGuiDockNodeFlagsPrivate_ = 1048576;
pub const ImGuiDockNodeFlags_NoResizeX: ImGuiDockNodeFlagsPrivate_ = 2097152;
pub const ImGuiDockNodeFlags_NoResizeY: ImGuiDockNodeFlagsPrivate_ = 4194304;
pub const ImGuiDockNodeFlags_SharedFlagsInheritMask_: ImGuiDockNodeFlagsPrivate_ = -1;
pub const ImGuiDockNodeFlags_NoResizeFlagsMask_: ImGuiDockNodeFlagsPrivate_ = 6291488;
pub const ImGuiDockNodeFlags_LocalFlagsMask_: ImGuiDockNodeFlagsPrivate_ = 6421616;
pub const ImGuiDockNodeFlags_LocalFlagsTransferMask_: ImGuiDockNodeFlagsPrivate_ = 6420592;
pub const ImGuiDockNodeFlags_SavedFlagsMask_: ImGuiDockNodeFlagsPrivate_ = 6421536;
pub type ImGuiDockNodeFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiDataAuthority_Auto: ImGuiDataAuthority_ = 0;
pub const ImGuiDataAuthority_DockNode: ImGuiDataAuthority_ = 1;
pub const ImGuiDataAuthority_Window: ImGuiDataAuthority_ = 2;
pub type ImGuiDataAuthority_ = ::std::os::raw::c_uint;
pub const ImGuiDockNodeState_Unknown: ImGuiDockNodeState = 0;
pub const ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow: ImGuiDockNodeState = 1;
pub const ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing: ImGuiDockNodeState = 2;
pub const ImGuiDockNodeState_HostWindowVisible: ImGuiDockNodeState = 3;
pub type ImGuiDockNodeState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiDockNode {
    pub ID: ImGuiID,
    pub SharedFlags: ImGuiDockNodeFlags,
    pub LocalFlags: ImGuiDockNodeFlags,
    pub ParentNode: *mut ImGuiDockNode,
    pub ChildNodes: [*mut ImGuiDockNode; 2usize],
    pub Windows: ImVector_ImGuiWindowPtr,
    pub TabBar: *mut ImGuiTabBar,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeRef: ImVec2,
    pub SplitAxis: ImGuiAxis,
    pub WindowClass: ImGuiWindowClass,
    pub State: ImGuiDockNodeState,
    pub HostWindow: *mut ImGuiWindow,
    pub VisibleWindow: *mut ImGuiWindow,
    pub CentralNode: *mut ImGuiDockNode,
    pub OnlyNodeWithWindows: *mut ImGuiDockNode,
    pub LastFrameAlive: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameFocused: ::std::os::raw::c_int,
    pub LastFocusedNodeId: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub WantCloseTabId: ImGuiID,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize], u8>,
    pub __bindgen_padding_0: [u8; 5usize],
}
#[test]
fn bindgen_test_layout_ImGuiDockNode() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDockNode>(),
        192usize,
        concat!("Size of: ", stringify!(ImGuiDockNode))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDockNode>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDockNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).SharedFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SharedFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).LocalFlags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LocalFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).ParentNode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(ParentNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).ChildNodes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(ChildNodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).Windows as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(Windows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).TabBar as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(TabBar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).Pos as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).Size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).SizeRef as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SizeRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).SplitAxis as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SplitAxis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).WindowClass as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(WindowClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).State as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).HostWindow as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(HostWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).VisibleWindow as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(VisibleWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).CentralNode as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(CentralNode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiDockNode>())).OnlyNodeWithWindows as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(OnlyNodeWithWindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).LastFrameAlive as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFrameAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).LastFrameActive as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).LastFrameFocused as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFrameFocused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).LastFocusedNodeId as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFocusedNodeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).SelectedTabId as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SelectedTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).WantCloseTabId as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(WantCloseTabId)
        )
    );
}
impl Default for ImGuiDockNode {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ImGuiDockNode {
    #[inline]
    pub fn AuthorityForPos(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForPos(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn AuthorityForSize(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForSize(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn AuthorityForViewport(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForViewport(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn IsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IsFocused(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsFocused(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HasCloseButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCloseButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HasWindowMenuButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasWindowMenuButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn EnableCloseButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_EnableCloseButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantCloseAll(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantCloseAll(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantLockSizeOnce(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantLockSizeOnce(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantMouseMove(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantMouseMove(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantHiddenTabBarUpdate(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarUpdate(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantHiddenTabBarToggle(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarToggle(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn MarkedForPosSizeWrite(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_MarkedForPosSizeWrite(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AuthorityForPos: ImGuiDataAuthority,
        AuthorityForSize: ImGuiDataAuthority,
        AuthorityForViewport: ImGuiDataAuthority,
        IsVisible: bool,
        IsFocused: bool,
        HasCloseButton: bool,
        HasWindowMenuButton: bool,
        EnableCloseButton: bool,
        WantCloseAll: bool,
        WantLockSizeOnce: bool,
        WantMouseMove: bool,
        WantHiddenTabBarUpdate: bool,
        WantHiddenTabBarToggle: bool,
        MarkedForPosSizeWrite: bool,
    ) -> __BindgenBitfieldUnit<[u8; 3usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let AuthorityForPos: u32 = unsafe { ::std::mem::transmute(AuthorityForPos) };
            AuthorityForPos as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let AuthorityForSize: u32 = unsafe { ::std::mem::transmute(AuthorityForSize) };
            AuthorityForSize as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let AuthorityForViewport: u32 = unsafe { ::std::mem::transmute(AuthorityForViewport) };
            AuthorityForViewport as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let IsVisible: u8 = unsafe { ::std::mem::transmute(IsVisible) };
            IsVisible as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let IsFocused: u8 = unsafe { ::std::mem::transmute(IsFocused) };
            IsFocused as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let HasCloseButton: u8 = unsafe { ::std::mem::transmute(HasCloseButton) };
            HasCloseButton as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let HasWindowMenuButton: u8 = unsafe { ::std::mem::transmute(HasWindowMenuButton) };
            HasWindowMenuButton as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let EnableCloseButton: u8 = unsafe { ::std::mem::transmute(EnableCloseButton) };
            EnableCloseButton as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let WantCloseAll: u8 = unsafe { ::std::mem::transmute(WantCloseAll) };
            WantCloseAll as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let WantLockSizeOnce: u8 = unsafe { ::std::mem::transmute(WantLockSizeOnce) };
            WantLockSizeOnce as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let WantMouseMove: u8 = unsafe { ::std::mem::transmute(WantMouseMove) };
            WantMouseMove as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let WantHiddenTabBarUpdate: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarUpdate) };
            WantHiddenTabBarUpdate as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let WantHiddenTabBarToggle: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarToggle) };
            WantHiddenTabBarToggle as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let MarkedForPosSizeWrite: u8 = unsafe { ::std::mem::transmute(MarkedForPosSizeWrite) };
            MarkedForPosSizeWrite as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDockContext {
    pub Nodes: ImGuiStorage,
    pub Requests: ImVector_ImGuiDockRequest,
    pub NodesSettings: ImVector_ImGuiDockNodeSettings,
    pub WantFullRebuild: bool,
}
#[test]
fn bindgen_test_layout_ImGuiDockContext() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDockContext>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiDockContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDockContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDockContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockContext>())).Nodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(Nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockContext>())).Requests as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(Requests)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockContext>())).NodesSettings as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(NodesSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiDockContext>())).WantFullRebuild as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(WantFullRebuild)
        )
    );
}
impl Default for ImGuiDockContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiViewportP {
    pub _ImGuiViewport: ImGuiViewport,
    pub Idx: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameDrawLists: [::std::os::raw::c_int; 2usize],
    pub LastFrontMostStampCount: ::std::os::raw::c_int,
    pub LastNameHash: ImGuiID,
    pub LastPos: ImVec2,
    pub Alpha: f32,
    pub LastAlpha: f32,
    pub PlatformMonitor: ::std::os::raw::c_short,
    pub PlatformWindowCreated: bool,
    pub Window: *mut ImGuiWindow,
    pub DrawLists: [*mut ImDrawList; 2usize],
    pub DrawDataP: ImDrawData,
    pub DrawDataBuilder: ImDrawDataBuilder,
    pub LastPlatformPos: ImVec2,
    pub LastPlatformSize: ImVec2,
    pub LastRendererSize: ImVec2,
    pub CurrWorkOffsetMin: ImVec2,
    pub CurrWorkOffsetMax: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiViewportP() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiViewportP>(),
        312usize,
        concat!("Size of: ", stringify!(ImGuiViewportP))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiViewportP>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiViewportP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>()))._ImGuiViewport as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(_ImGuiViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).Idx as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(Idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastFrameActive as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiViewportP>())).LastFrameDrawLists as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastFrameDrawLists)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiViewportP>())).LastFrontMostStampCount as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastFrontMostStampCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastNameHash as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastNameHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastPos as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).Alpha as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(Alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastAlpha as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastAlpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).PlatformMonitor as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(PlatformMonitor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiViewportP>())).PlatformWindowCreated as *const _ as usize
        },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(PlatformWindowCreated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).Window as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).DrawLists as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(DrawLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).DrawDataP as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(DrawDataP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).DrawDataBuilder as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(DrawDataBuilder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastPlatformPos as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastPlatformPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastPlatformSize as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastPlatformSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastRendererSize as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastRendererSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiViewportP>())).CurrWorkOffsetMin as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(CurrWorkOffsetMin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiViewportP>())).CurrWorkOffsetMax as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(CurrWorkOffsetMax)
        )
    );
}
impl Default for ImGuiViewportP {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiWindowSettings {
    pub ID: ImGuiID,
    pub Pos: ImVec2ih,
    pub Size: ImVec2ih,
    pub ViewportPos: ImVec2ih,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub ClassId: ImGuiID,
    pub DockOrder: ::std::os::raw::c_short,
    pub Collapsed: bool,
    pub WantApply: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowSettings>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).Pos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).Size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).ViewportPos as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ViewportPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).ViewportId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ViewportId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).DockId as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(DockId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).ClassId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ClassId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).DockOrder as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(DockOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).Collapsed as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Collapsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).WantApply as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(WantApply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiSettingsHandler {
    pub TypeName: *const ::std::os::raw::c_char,
    pub TypeHash: ImGuiID,
    pub ClearAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadInitFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadOpenFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReadLineFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            entry: *mut ::std::os::raw::c_void,
            line: *const ::std::os::raw::c_char,
        ),
    >,
    pub ApplyAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub WriteAllFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            out_buf: *mut ImGuiTextBuffer,
        ),
    >,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiSettingsHandler() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiSettingsHandler>(),
        72usize,
        concat!("Size of: ", stringify!(ImGuiSettingsHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSettingsHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSettingsHandler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).TypeName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(TypeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).TypeHash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(TypeHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ClearAllFn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ClearAllFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ReadInitFn as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadInitFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ReadOpenFn as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadOpenFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ReadLineFn as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadLineFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ApplyAllFn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ApplyAllFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).WriteAllFn as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(WriteAllFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).UserData as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(UserData)
        )
    );
}
impl Default for ImGuiSettingsHandler {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiContext {
    pub Initialized: bool,
    pub FontAtlasOwnedByContext: bool,
    pub IO: ImGuiIO,
    pub PlatformIO: ImGuiPlatformIO,
    pub Style: ImGuiStyle,
    pub ConfigFlagsCurrFrame: ImGuiConfigFlags,
    pub ConfigFlagsLastFrame: ImGuiConfigFlags,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub FontBaseSize: f32,
    pub DrawListSharedData: ImDrawListSharedData,
    pub Time: f64,
    pub FrameCount: ::std::os::raw::c_int,
    pub FrameCountEnded: ::std::os::raw::c_int,
    pub FrameCountPlatformEnded: ::std::os::raw::c_int,
    pub FrameCountRendered: ::std::os::raw::c_int,
    pub WithinFrameScope: bool,
    pub WithinFrameScopeWithImplicitWindow: bool,
    pub WithinEndChild: bool,
    pub TestEngineHookItems: bool,
    pub TestEngineHookIdInfo: ImGuiID,
    pub TestEngine: *mut ::std::os::raw::c_void,
    pub Windows: ImVector_ImGuiWindowPtr,
    pub WindowsFocusOrder: ImVector_ImGuiWindowPtr,
    pub WindowsTempSortBuffer: ImVector_ImGuiWindowPtr,
    pub CurrentWindowStack: ImVector_ImGuiWindowPtr,
    pub WindowsById: ImGuiStorage,
    pub WindowsActiveCount: ::std::os::raw::c_int,
    pub CurrentWindow: *mut ImGuiWindow,
    pub HoveredWindow: *mut ImGuiWindow,
    pub HoveredRootWindow: *mut ImGuiWindow,
    pub HoveredWindowUnderMovingWindow: *mut ImGuiWindow,
    pub HoveredDockNode: *mut ImGuiDockNode,
    pub MovingWindow: *mut ImGuiWindow,
    pub WheelingWindow: *mut ImGuiWindow,
    pub WheelingWindowRefMousePos: ImVec2,
    pub WheelingWindowTimer: f32,
    pub HoveredId: ImGuiID,
    pub HoveredIdPreviousFrame: ImGuiID,
    pub HoveredIdAllowOverlap: bool,
    pub HoveredIdDisabled: bool,
    pub HoveredIdTimer: f32,
    pub HoveredIdNotActiveTimer: f32,
    pub ActiveId: ImGuiID,
    pub ActiveIdIsAlive: ImGuiID,
    pub ActiveIdTimer: f32,
    pub ActiveIdIsJustActivated: bool,
    pub ActiveIdAllowOverlap: bool,
    pub ActiveIdNoClearOnFocusLoss: bool,
    pub ActiveIdHasBeenPressedBefore: bool,
    pub ActiveIdHasBeenEditedBefore: bool,
    pub ActiveIdHasBeenEditedThisFrame: bool,
    pub ActiveIdUsingNavDirMask: ImU32,
    pub ActiveIdUsingNavInputMask: ImU32,
    pub ActiveIdUsingKeyInputMask: ImU64,
    pub ActiveIdClickOffset: ImVec2,
    pub ActiveIdWindow: *mut ImGuiWindow,
    pub ActiveIdSource: ImGuiInputSource,
    pub ActiveIdMouseButton: ::std::os::raw::c_int,
    pub ActiveIdPreviousFrame: ImGuiID,
    pub ActiveIdPreviousFrameIsAlive: bool,
    pub ActiveIdPreviousFrameHasBeenEditedBefore: bool,
    pub ActiveIdPreviousFrameWindow: *mut ImGuiWindow,
    pub LastActiveId: ImGuiID,
    pub LastActiveIdTimer: f32,
    pub NextWindowData: ImGuiNextWindowData,
    pub NextItemData: ImGuiNextItemData,
    pub ColorModifiers: ImVector_ImGuiColorMod,
    pub StyleModifiers: ImVector_ImGuiStyleMod,
    pub FontStack: ImVector_ImFontPtr,
    pub OpenPopupStack: ImVector_ImGuiPopupData,
    pub BeginPopupStack: ImVector_ImGuiPopupData,
    pub Viewports: ImVector_ImGuiViewportPPtr,
    pub CurrentDpiScale: f32,
    pub CurrentViewport: *mut ImGuiViewportP,
    pub MouseViewport: *mut ImGuiViewportP,
    pub MouseLastHoveredViewport: *mut ImGuiViewportP,
    pub ViewportFrontMostStampCount: ::std::os::raw::c_int,
    pub NavWindow: *mut ImGuiWindow,
    pub NavId: ImGuiID,
    pub NavFocusScopeId: ImGuiID,
    pub NavActivateId: ImGuiID,
    pub NavActivateDownId: ImGuiID,
    pub NavActivatePressedId: ImGuiID,
    pub NavInputId: ImGuiID,
    pub NavJustTabbedId: ImGuiID,
    pub NavJustMovedToId: ImGuiID,
    pub NavJustMovedToFocusScopeId: ImGuiID,
    pub NavJustMovedToKeyMods: ImGuiKeyModFlags,
    pub NavNextActivateId: ImGuiID,
    pub NavInputSource: ImGuiInputSource,
    pub NavScoringRect: ImRect,
    pub NavScoringCount: ::std::os::raw::c_int,
    pub NavLayer: ImGuiNavLayer,
    pub NavIdTabCounter: ::std::os::raw::c_int,
    pub NavIdIsAlive: bool,
    pub NavMousePosDirty: bool,
    pub NavDisableHighlight: bool,
    pub NavDisableMouseHover: bool,
    pub NavAnyRequest: bool,
    pub NavInitRequest: bool,
    pub NavInitRequestFromMove: bool,
    pub NavInitResultId: ImGuiID,
    pub NavInitResultRectRel: ImRect,
    pub NavMoveRequest: bool,
    pub NavMoveRequestFlags: ImGuiNavMoveFlags,
    pub NavMoveRequestForward: ImGuiNavForward,
    pub NavMoveRequestKeyMods: ImGuiKeyModFlags,
    pub NavMoveDir: ImGuiDir,
    pub NavMoveDirLast: ImGuiDir,
    pub NavMoveClipDir: ImGuiDir,
    pub NavMoveResultLocal: ImGuiNavMoveResult,
    pub NavMoveResultLocalVisibleSet: ImGuiNavMoveResult,
    pub NavMoveResultOther: ImGuiNavMoveResult,
    pub NavWrapRequestWindow: *mut ImGuiWindow,
    pub NavWrapRequestFlags: ImGuiNavMoveFlags,
    pub NavWindowingTarget: *mut ImGuiWindow,
    pub NavWindowingTargetAnim: *mut ImGuiWindow,
    pub NavWindowingListWindow: *mut ImGuiWindow,
    pub NavWindowingTimer: f32,
    pub NavWindowingHighlightAlpha: f32,
    pub NavWindowingToggleLayer: bool,
    pub FocusRequestCurrWindow: *mut ImGuiWindow,
    pub FocusRequestNextWindow: *mut ImGuiWindow,
    pub FocusRequestCurrCounterRegular: ::std::os::raw::c_int,
    pub FocusRequestCurrCounterTabStop: ::std::os::raw::c_int,
    pub FocusRequestNextCounterRegular: ::std::os::raw::c_int,
    pub FocusRequestNextCounterTabStop: ::std::os::raw::c_int,
    pub FocusTabPressed: bool,
    pub DimBgRatio: f32,
    pub MouseCursor: ImGuiMouseCursor,
    pub DragDropActive: bool,
    pub DragDropWithinSource: bool,
    pub DragDropWithinTarget: bool,
    pub DragDropSourceFlags: ImGuiDragDropFlags,
    pub DragDropSourceFrameCount: ::std::os::raw::c_int,
    pub DragDropMouseButton: ::std::os::raw::c_int,
    pub DragDropPayload: ImGuiPayload,
    pub DragDropTargetRect: ImRect,
    pub DragDropTargetId: ImGuiID,
    pub DragDropAcceptFlags: ImGuiDragDropFlags,
    pub DragDropAcceptIdCurrRectSurface: f32,
    pub DragDropAcceptIdCurr: ImGuiID,
    pub DragDropAcceptIdPrev: ImGuiID,
    pub DragDropAcceptFrameCount: ::std::os::raw::c_int,
    pub DragDropHoldJustPressedId: ImGuiID,
    pub DragDropPayloadBufHeap: ImVector_unsigned_char,
    pub DragDropPayloadBufLocal: [::std::os::raw::c_uchar; 16usize],
    pub CurrentTabBar: *mut ImGuiTabBar,
    pub TabBars: ImPool_ImGuiTabBar,
    pub CurrentTabBarStack: ImVector_ImGuiPtrOrIndex,
    pub ShrinkWidthBuffer: ImVector_ImGuiShrinkWidthItem,
    pub LastValidMousePos: ImVec2,
    pub InputTextState: ImGuiInputTextState,
    pub InputTextPasswordFont: ImFont,
    pub TempInputId: ImGuiID,
    pub ColorEditOptions: ImGuiColorEditFlags,
    pub ColorEditLastHue: f32,
    pub ColorEditLastSat: f32,
    pub ColorEditLastColor: [f32; 3usize],
    pub ColorPickerRef: ImVec4,
    pub SliderCurrentAccum: f32,
    pub SliderCurrentAccumDirty: bool,
    pub DragCurrentAccumDirty: bool,
    pub DragCurrentAccum: f32,
    pub DragSpeedDefaultRatio: f32,
    pub ScrollbarClickDeltaToGrabCenter: f32,
    pub TooltipOverrideCount: ::std::os::raw::c_int,
    pub ClipboardHandlerData: ImVector_char,
    pub MenusIdSubmittedThisFrame: ImVector_ImGuiID,
    pub PlatformImePos: ImVec2,
    pub PlatformImeLastPos: ImVec2,
    pub PlatformImePosViewport: *mut ImGuiViewportP,
    pub PlatformLocaleDecimalPoint: ::std::os::raw::c_char,
    pub DockContext: ImGuiDockContext,
    pub SettingsLoaded: bool,
    pub SettingsDirtyTimer: f32,
    pub SettingsIniData: ImGuiTextBuffer,
    pub SettingsHandlers: ImVector_ImGuiSettingsHandler,
    pub SettingsWindows: ImChunkStream_ImGuiWindowSettings,
    pub LogEnabled: bool,
    pub LogType: ImGuiLogType,
    pub LogFile: ImFileHandle,
    pub LogBuffer: ImGuiTextBuffer,
    pub LogLinePosY: f32,
    pub LogLineFirstItem: bool,
    pub LogDepthRef: ::std::os::raw::c_int,
    pub LogDepthToExpand: ::std::os::raw::c_int,
    pub LogDepthToExpandDefault: ::std::os::raw::c_int,
    pub DebugItemPickerActive: bool,
    pub DebugItemPickerBreakId: ImGuiID,
    pub FramerateSecPerFrame: [f32; 120usize],
    pub FramerateSecPerFrameIdx: ::std::os::raw::c_int,
    pub FramerateSecPerFrameAccum: f32,
    pub WantCaptureMouseNextFrame: ::std::os::raw::c_int,
    pub WantCaptureKeyboardNextFrame: ::std::os::raw::c_int,
    pub WantTextInputNextFrame: ::std::os::raw::c_int,
    pub TempBuffer: [::std::os::raw::c_char; 3073usize],
}
#[test]
fn bindgen_test_layout_ImGuiContext() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiContext>(),
        15920usize,
        concat!("Size of: ", stringify!(ImGuiContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Initialized as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FontAtlasOwnedByContext as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontAtlasOwnedByContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).IO as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(IO)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformIO as *const _ as usize },
        5472usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformIO)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Style as *const _ as usize },
        5704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Style)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ConfigFlagsCurrFrame as *const _ as usize
        },
        6692usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ConfigFlagsCurrFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ConfigFlagsLastFrame as *const _ as usize
        },
        6696usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ConfigFlagsLastFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Font as *const _ as usize },
        6704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Font)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FontSize as *const _ as usize },
        6712usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FontBaseSize as *const _ as usize },
        6716usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontBaseSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DrawListSharedData as *const _ as usize },
        6720usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DrawListSharedData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Time as *const _ as usize },
        6936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FrameCount as *const _ as usize },
        6944usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FrameCountEnded as *const _ as usize },
        6948usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountEnded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FrameCountPlatformEnded as *const _ as usize
        },
        6952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountPlatformEnded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FrameCountRendered as *const _ as usize },
        6956usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountRendered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WithinFrameScope as *const _ as usize },
        6960usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinFrameScope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WithinFrameScopeWithImplicitWindow as *const _
                as usize
        },
        6961usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinFrameScopeWithImplicitWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WithinEndChild as *const _ as usize },
        6962usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinEndChild)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).TestEngineHookItems as *const _ as usize
        },
        6963usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngineHookItems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).TestEngineHookIdInfo as *const _ as usize
        },
        6964usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngineHookIdInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TestEngine as *const _ as usize },
        6968usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Windows as *const _ as usize },
        6976usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Windows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WindowsFocusOrder as *const _ as usize },
        6992usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsFocusOrder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WindowsTempSortBuffer as *const _ as usize
        },
        7008usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsTempSortBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentWindowStack as *const _ as usize },
        7024usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentWindowStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WindowsById as *const _ as usize },
        7040usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsById)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WindowsActiveCount as *const _ as usize },
        7056usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsActiveCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentWindow as *const _ as usize },
        7064usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredWindow as *const _ as usize },
        7072usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredRootWindow as *const _ as usize },
        7080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredRootWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).HoveredWindowUnderMovingWindow as *const _
                as usize
        },
        7088usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredWindowUnderMovingWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredDockNode as *const _ as usize },
        7096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredDockNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).MovingWindow as *const _ as usize },
        7104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MovingWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WheelingWindow as *const _ as usize },
        7112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WheelingWindowRefMousePos as *const _ as usize
        },
        7120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowRefMousePos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WheelingWindowTimer as *const _ as usize
        },
        7128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredId as *const _ as usize },
        7132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdPreviousFrame as *const _ as usize
        },
        7136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdPreviousFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdAllowOverlap as *const _ as usize
        },
        7140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdAllowOverlap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdDisabled as *const _ as usize },
        7141usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdDisabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdTimer as *const _ as usize },
        7144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdTimer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdNotActiveTimer as *const _ as usize
        },
        7148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdNotActiveTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveId as *const _ as usize },
        7152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdIsAlive as *const _ as usize },
        7156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdTimer as *const _ as usize },
        7160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdTimer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdIsJustActivated as *const _ as usize
        },
        7164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdIsJustActivated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdAllowOverlap as *const _ as usize
        },
        7165usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdAllowOverlap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdNoClearOnFocusLoss as *const _ as usize
        },
        7166usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdNoClearOnFocusLoss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdHasBeenPressedBefore as *const _
                as usize
        },
        7167usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenPressedBefore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdHasBeenEditedBefore as *const _
                as usize
        },
        7168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenEditedBefore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdHasBeenEditedThisFrame as *const _
                as usize
        },
        7169usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenEditedThisFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdUsingNavDirMask as *const _ as usize
        },
        7172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingNavDirMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdUsingNavInputMask as *const _ as usize
        },
        7176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingNavInputMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdUsingKeyInputMask as *const _ as usize
        },
        7184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingKeyInputMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdClickOffset as *const _ as usize
        },
        7192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdClickOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdWindow as *const _ as usize },
        7200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdSource as *const _ as usize },
        7208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdMouseButton as *const _ as usize
        },
        7212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdMouseButton)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrame as *const _ as usize
        },
        7216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrameIsAlive as *const _
                as usize
        },
        7220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameIsAlive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrameHasBeenEditedBefore
                as *const _ as usize
        },
        7221usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameHasBeenEditedBefore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrameWindow as *const _
                as usize
        },
        7224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LastActiveId as *const _ as usize },
        7232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastActiveId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LastActiveIdTimer as *const _ as usize },
        7236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastActiveIdTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NextWindowData as *const _ as usize },
        7240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NextWindowData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NextItemData as *const _ as usize },
        7384usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NextItemData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorModifiers as *const _ as usize },
        7408usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorModifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).StyleModifiers as *const _ as usize },
        7424usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(StyleModifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FontStack as *const _ as usize },
        7440usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).OpenPopupStack as *const _ as usize },
        7456usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(OpenPopupStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).BeginPopupStack as *const _ as usize },
        7472usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(BeginPopupStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Viewports as *const _ as usize },
        7488usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Viewports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentDpiScale as *const _ as usize },
        7504usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentDpiScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentViewport as *const _ as usize },
        7512usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).MouseViewport as *const _ as usize },
        7520usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseViewport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).MouseLastHoveredViewport as *const _ as usize
        },
        7528usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseLastHoveredViewport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ViewportFrontMostStampCount as *const _
                as usize
        },
        7536usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ViewportFrontMostStampCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindow as *const _ as usize },
        7544usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavId as *const _ as usize },
        7552usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavFocusScopeId as *const _ as usize },
        7556usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavFocusScopeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavActivateId as *const _ as usize },
        7560usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivateId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavActivateDownId as *const _ as usize },
        7564usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivateDownId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavActivatePressedId as *const _ as usize
        },
        7568usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivatePressedId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInputId as *const _ as usize },
        7572usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInputId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavJustTabbedId as *const _ as usize },
        7576usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustTabbedId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavJustMovedToId as *const _ as usize },
        7580usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavJustMovedToFocusScopeId as *const _ as usize
        },
        7584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToFocusScopeId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavJustMovedToKeyMods as *const _ as usize
        },
        7588usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToKeyMods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavNextActivateId as *const _ as usize },
        7592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavNextActivateId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInputSource as *const _ as usize },
        7596usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInputSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavScoringRect as *const _ as usize },
        7600usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavScoringRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavScoringCount as *const _ as usize },
        7616usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavScoringCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavLayer as *const _ as usize },
        7620usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavLayer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavIdTabCounter as *const _ as usize },
        7624usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavIdTabCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavIdIsAlive as *const _ as usize },
        7628usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMousePosDirty as *const _ as usize },
        7629usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMousePosDirty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavDisableHighlight as *const _ as usize
        },
        7630usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavDisableHighlight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavDisableMouseHover as *const _ as usize
        },
        7631usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavDisableMouseHover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavAnyRequest as *const _ as usize },
        7632usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavAnyRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInitRequest as *const _ as usize },
        7633usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavInitRequestFromMove as *const _ as usize
        },
        7634usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitRequestFromMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInitResultId as *const _ as usize },
        7636usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitResultId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavInitResultRectRel as *const _ as usize
        },
        7640usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitResultRectRel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequest as *const _ as usize },
        7656usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequestFlags as *const _ as usize
        },
        7660usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequestFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequestForward as *const _ as usize
        },
        7664usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequestForward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequestKeyMods as *const _ as usize
        },
        7668usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequestKeyMods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveDir as *const _ as usize },
        7672usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveDirLast as *const _ as usize },
        7676usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveDirLast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveClipDir as *const _ as usize },
        7680usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveClipDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveResultLocal as *const _ as usize },
        7688usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultLocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavMoveResultLocalVisibleSet as *const _
                as usize
        },
        7736usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultLocalVisibleSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveResultOther as *const _ as usize },
        7784usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultOther)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWrapRequestWindow as *const _ as usize
        },
        7832usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWrapRequestWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWrapRequestFlags as *const _ as usize
        },
        7840usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWrapRequestFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingTarget as *const _ as usize },
        7848usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingTargetAnim as *const _ as usize
        },
        7856usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTargetAnim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingListWindow as *const _ as usize
        },
        7864usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingListWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingTimer as *const _ as usize },
        7872usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTimer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingHighlightAlpha as *const _ as usize
        },
        7876usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingHighlightAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingToggleLayer as *const _ as usize
        },
        7880usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingToggleLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestCurrWindow as *const _ as usize
        },
        7888usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestCurrWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestNextWindow as *const _ as usize
        },
        7896usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestNextWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestCurrCounterRegular as *const _
                as usize
        },
        7904usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestCurrCounterRegular)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestCurrCounterTabStop as *const _
                as usize
        },
        7908usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestCurrCounterTabStop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestNextCounterRegular as *const _
                as usize
        },
        7912usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestNextCounterRegular)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestNextCounterTabStop as *const _
                as usize
        },
        7916usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestNextCounterTabStop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FocusTabPressed as *const _ as usize },
        7920usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusTabPressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DimBgRatio as *const _ as usize },
        7924usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DimBgRatio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).MouseCursor as *const _ as usize },
        7928usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseCursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropActive as *const _ as usize },
        7932usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropWithinSource as *const _ as usize
        },
        7933usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropWithinSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropWithinTarget as *const _ as usize
        },
        7934usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropWithinTarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropSourceFlags as *const _ as usize
        },
        7936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropSourceFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropSourceFrameCount as *const _ as usize
        },
        7940usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropSourceFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropMouseButton as *const _ as usize
        },
        7944usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropMouseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropPayload as *const _ as usize },
        7952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropTargetRect as *const _ as usize },
        8016usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropTargetRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropTargetId as *const _ as usize },
        8032usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropTargetId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptFlags as *const _ as usize
        },
        8036usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptIdCurrRectSurface as *const _
                as usize
        },
        8040usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdCurrRectSurface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptIdCurr as *const _ as usize
        },
        8044usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdCurr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptIdPrev as *const _ as usize
        },
        8048usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdPrev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptFrameCount as *const _ as usize
        },
        8052usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropHoldJustPressedId as *const _ as usize
        },
        8056usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropHoldJustPressedId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropPayloadBufHeap as *const _ as usize
        },
        8064usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayloadBufHeap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropPayloadBufLocal as *const _ as usize
        },
        8080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayloadBufLocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentTabBar as *const _ as usize },
        8096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTabBar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TabBars as *const _ as usize },
        8104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TabBars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentTabBarStack as *const _ as usize },
        8144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTabBarStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ShrinkWidthBuffer as *const _ as usize },
        8160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ShrinkWidthBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LastValidMousePos as *const _ as usize },
        8176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastValidMousePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).InputTextState as *const _ as usize },
        8184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputTextState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).InputTextPasswordFont as *const _ as usize
        },
        11920usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputTextPasswordFont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TempInputId as *const _ as usize },
        12032usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TempInputId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditOptions as *const _ as usize },
        12036usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditLastHue as *const _ as usize },
        12040usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditLastHue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditLastSat as *const _ as usize },
        12044usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditLastSat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditLastColor as *const _ as usize },
        12048usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditLastColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorPickerRef as *const _ as usize },
        12060usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorPickerRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SliderCurrentAccum as *const _ as usize },
        12076usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SliderCurrentAccum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).SliderCurrentAccumDirty as *const _ as usize
        },
        12080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SliderCurrentAccumDirty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragCurrentAccumDirty as *const _ as usize
        },
        12081usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragCurrentAccumDirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragCurrentAccum as *const _ as usize },
        12084usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragCurrentAccum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragSpeedDefaultRatio as *const _ as usize
        },
        12088usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragSpeedDefaultRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ScrollbarClickDeltaToGrabCenter as *const _
                as usize
        },
        12092usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ScrollbarClickDeltaToGrabCenter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).TooltipOverrideCount as *const _ as usize
        },
        12096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TooltipOverrideCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ClipboardHandlerData as *const _ as usize
        },
        12104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ClipboardHandlerData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).MenusIdSubmittedThisFrame as *const _ as usize
        },
        12120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MenusIdSubmittedThisFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformImePos as *const _ as usize },
        12136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformImeLastPos as *const _ as usize },
        12144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImeLastPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).PlatformImePosViewport as *const _ as usize
        },
        12152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImePosViewport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).PlatformLocaleDecimalPoint as *const _ as usize
        },
        12160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformLocaleDecimalPoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DockContext as *const _ as usize },
        12168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DockContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsLoaded as *const _ as usize },
        12224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsLoaded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsDirtyTimer as *const _ as usize },
        12228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsDirtyTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsIniData as *const _ as usize },
        12232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsIniData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsHandlers as *const _ as usize },
        12248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsHandlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsWindows as *const _ as usize },
        12264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsWindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogEnabled as *const _ as usize },
        12280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogType as *const _ as usize },
        12284usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogFile as *const _ as usize },
        12288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogBuffer as *const _ as usize },
        12296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogLinePosY as *const _ as usize },
        12312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogLinePosY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogLineFirstItem as *const _ as usize },
        12316usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogLineFirstItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogDepthRef as *const _ as usize },
        12320usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogDepthToExpand as *const _ as usize },
        12324usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthToExpand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).LogDepthToExpandDefault as *const _ as usize
        },
        12328usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthToExpandDefault)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DebugItemPickerActive as *const _ as usize
        },
        12332usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugItemPickerActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DebugItemPickerBreakId as *const _ as usize
        },
        12336usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugItemPickerBreakId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FramerateSecPerFrame as *const _ as usize
        },
        12340usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FramerateSecPerFrameIdx as *const _ as usize
        },
        12820usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrameIdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FramerateSecPerFrameAccum as *const _ as usize
        },
        12824usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrameAccum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WantCaptureMouseNextFrame as *const _ as usize
        },
        12828usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantCaptureMouseNextFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WantCaptureKeyboardNextFrame as *const _
                as usize
        },
        12832usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantCaptureKeyboardNextFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WantTextInputNextFrame as *const _ as usize
        },
        12836usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantTextInputNextFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TempBuffer as *const _ as usize },
        12840usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TempBuffer)
        )
    );
}
impl Default for ImGuiContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ImGuiContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ImGuiContext {{ Initialized: {:?}, FontAtlasOwnedByContext: {:?}, IO: {:?}, PlatformIO: {:?}, Style: {:?}, ConfigFlagsCurrFrame: {:?}, ConfigFlagsLastFrame: {:?}, Font: {:?}, FontSize: {:?}, FontBaseSize: {:?}, DrawListSharedData: {:?}, Time: {:?}, FrameCount: {:?}, FrameCountEnded: {:?}, FrameCountPlatformEnded: {:?}, FrameCountRendered: {:?}, WithinFrameScope: {:?}, WithinFrameScopeWithImplicitWindow: {:?}, WithinEndChild: {:?}, TestEngineHookItems: {:?}, TestEngineHookIdInfo: {:?}, TestEngine: {:?}, Windows: {:?}, WindowsFocusOrder: {:?}, WindowsTempSortBuffer: {:?}, CurrentWindowStack: {:?}, WindowsById: {:?}, WindowsActiveCount: {:?}, CurrentWindow: {:?}, HoveredWindow: {:?}, HoveredRootWindow: {:?}, HoveredWindowUnderMovingWindow: {:?}, HoveredDockNode: {:?}, MovingWindow: {:?}, WheelingWindow: {:?}, WheelingWindowRefMousePos: {:?}, WheelingWindowTimer: {:?}, HoveredId: {:?}, HoveredIdPreviousFrame: {:?}, HoveredIdAllowOverlap: {:?}, HoveredIdDisabled: {:?}, HoveredIdTimer: {:?}, HoveredIdNotActiveTimer: {:?}, ActiveId: {:?}, ActiveIdIsAlive: {:?}, ActiveIdTimer: {:?}, ActiveIdIsJustActivated: {:?}, ActiveIdAllowOverlap: {:?}, ActiveIdNoClearOnFocusLoss: {:?}, ActiveIdHasBeenPressedBefore: {:?}, ActiveIdHasBeenEditedBefore: {:?}, ActiveIdHasBeenEditedThisFrame: {:?}, ActiveIdUsingNavDirMask: {:?}, ActiveIdUsingNavInputMask: {:?}, ActiveIdUsingKeyInputMask: {:?}, ActiveIdClickOffset: {:?}, ActiveIdWindow: {:?}, ActiveIdSource: {:?}, ActiveIdMouseButton: {:?}, ActiveIdPreviousFrame: {:?}, ActiveIdPreviousFrameIsAlive: {:?}, ActiveIdPreviousFrameHasBeenEditedBefore: {:?}, ActiveIdPreviousFrameWindow: {:?}, LastActiveId: {:?}, LastActiveIdTimer: {:?}, NextWindowData: {:?}, NextItemData: {:?}, ColorModifiers: {:?}, StyleModifiers: {:?}, FontStack: {:?}, OpenPopupStack: {:?}, BeginPopupStack: {:?}, Viewports: {:?}, CurrentDpiScale: {:?}, CurrentViewport: {:?}, MouseViewport: {:?}, MouseLastHoveredViewport: {:?}, ViewportFrontMostStampCount: {:?}, NavWindow: {:?}, NavId: {:?}, NavFocusScopeId: {:?}, NavActivateId: {:?}, NavActivateDownId: {:?}, NavActivatePressedId: {:?}, NavInputId: {:?}, NavJustTabbedId: {:?}, NavJustMovedToId: {:?}, NavJustMovedToFocusScopeId: {:?}, NavJustMovedToKeyMods: {:?}, NavNextActivateId: {:?}, NavInputSource: {:?}, NavScoringRect: {:?}, NavScoringCount: {:?}, NavLayer: {:?}, NavIdTabCounter: {:?}, NavIdIsAlive: {:?}, NavMousePosDirty: {:?}, NavDisableHighlight: {:?}, NavDisableMouseHover: {:?}, NavAnyRequest: {:?}, NavInitRequest: {:?}, NavInitRequestFromMove: {:?}, NavInitResultId: {:?}, NavInitResultRectRel: {:?}, NavMoveRequest: {:?}, NavMoveRequestFlags: {:?}, NavMoveRequestForward: {:?}, NavMoveRequestKeyMods: {:?}, NavMoveDir: {:?}, NavMoveDirLast: {:?}, NavMoveClipDir: {:?}, NavMoveResultLocal: {:?}, NavMoveResultLocalVisibleSet: {:?}, NavMoveResultOther: {:?}, NavWrapRequestWindow: {:?}, NavWrapRequestFlags: {:?}, NavWindowingTarget: {:?}, NavWindowingTargetAnim: {:?}, NavWindowingListWindow: {:?}, NavWindowingTimer: {:?}, NavWindowingHighlightAlpha: {:?}, NavWindowingToggleLayer: {:?}, FocusRequestCurrWindow: {:?}, FocusRequestNextWindow: {:?}, FocusRequestCurrCounterRegular: {:?}, FocusRequestCurrCounterTabStop: {:?}, FocusRequestNextCounterRegular: {:?}, FocusRequestNextCounterTabStop: {:?}, FocusTabPressed: {:?}, DimBgRatio: {:?}, MouseCursor: {:?}, DragDropActive: {:?}, DragDropWithinSource: {:?}, DragDropWithinTarget: {:?}, DragDropSourceFlags: {:?}, DragDropSourceFrameCount: {:?}, DragDropMouseButton: {:?}, DragDropPayload: {:?}, DragDropTargetRect: {:?}, DragDropTargetId: {:?}, DragDropAcceptFlags: {:?}, DragDropAcceptIdCurrRectSurface: {:?}, DragDropAcceptIdCurr: {:?}, DragDropAcceptIdPrev: {:?}, DragDropAcceptFrameCount: {:?}, DragDropHoldJustPressedId: {:?}, DragDropPayloadBufHeap: {:?}, DragDropPayloadBufLocal: {:?}, CurrentTabBar: {:?}, TabBars: {:?}, CurrentTabBarStack: {:?}, ShrinkWidthBuffer: {:?}, LastValidMousePos: {:?}, InputTextState: {:?}, InputTextPasswordFont: {:?}, TempInputId: {:?}, ColorEditOptions: {:?}, ColorEditLastHue: {:?}, ColorEditLastSat: {:?}, ColorEditLastColor: {:?}, ColorPickerRef: {:?}, SliderCurrentAccum: {:?}, SliderCurrentAccumDirty: {:?}, DragCurrentAccumDirty: {:?}, DragCurrentAccum: {:?}, DragSpeedDefaultRatio: {:?}, ScrollbarClickDeltaToGrabCenter: {:?}, TooltipOverrideCount: {:?}, ClipboardHandlerData: {:?}, MenusIdSubmittedThisFrame: {:?}, PlatformImePos: {:?}, PlatformImeLastPos: {:?}, PlatformImePosViewport: {:?}, PlatformLocaleDecimalPoint: {:?}, DockContext: {:?}, SettingsLoaded: {:?}, SettingsDirtyTimer: {:?}, SettingsIniData: {:?}, SettingsHandlers: {:?}, SettingsWindows: {:?}, LogEnabled: {:?}, LogType: {:?}, LogFile: {:?}, LogBuffer: {:?}, LogLinePosY: {:?}, LogLineFirstItem: {:?}, LogDepthRef: {:?}, LogDepthToExpand: {:?}, LogDepthToExpandDefault: {:?}, DebugItemPickerActive: {:?}, DebugItemPickerBreakId: {:?}, FramerateSecPerFrame: [{}], FramerateSecPerFrameIdx: {:?}, FramerateSecPerFrameAccum: {:?}, WantCaptureMouseNextFrame: {:?}, WantCaptureKeyboardNextFrame: {:?}, WantTextInputNextFrame: {:?}, TempBuffer: [{}] }}" , self . Initialized , self . FontAtlasOwnedByContext , self . IO , self . PlatformIO , self . Style , self . ConfigFlagsCurrFrame , self . ConfigFlagsLastFrame , self . Font , self . FontSize , self . FontBaseSize , self . DrawListSharedData , self . Time , self . FrameCount , self . FrameCountEnded , self . FrameCountPlatformEnded , self . FrameCountRendered , self . WithinFrameScope , self . WithinFrameScopeWithImplicitWindow , self . WithinEndChild , self . TestEngineHookItems , self . TestEngineHookIdInfo , self . TestEngine , self . Windows , self . WindowsFocusOrder , self . WindowsTempSortBuffer , self . CurrentWindowStack , self . WindowsById , self . WindowsActiveCount , self . CurrentWindow , self . HoveredWindow , self . HoveredRootWindow , self . HoveredWindowUnderMovingWindow , self . HoveredDockNode , self . MovingWindow , self . WheelingWindow , self . WheelingWindowRefMousePos , self . WheelingWindowTimer , self . HoveredId , self . HoveredIdPreviousFrame , self . HoveredIdAllowOverlap , self . HoveredIdDisabled , self . HoveredIdTimer , self . HoveredIdNotActiveTimer , self . ActiveId , self . ActiveIdIsAlive , self . ActiveIdTimer , self . ActiveIdIsJustActivated , self . ActiveIdAllowOverlap , self . ActiveIdNoClearOnFocusLoss , self . ActiveIdHasBeenPressedBefore , self . ActiveIdHasBeenEditedBefore , self . ActiveIdHasBeenEditedThisFrame , self . ActiveIdUsingNavDirMask , self . ActiveIdUsingNavInputMask , self . ActiveIdUsingKeyInputMask , self . ActiveIdClickOffset , self . ActiveIdWindow , self . ActiveIdSource , self . ActiveIdMouseButton , self . ActiveIdPreviousFrame , self . ActiveIdPreviousFrameIsAlive , self . ActiveIdPreviousFrameHasBeenEditedBefore , self . ActiveIdPreviousFrameWindow , self . LastActiveId , self . LastActiveIdTimer , self . NextWindowData , self . NextItemData , self . ColorModifiers , self . StyleModifiers , self . FontStack , self . OpenPopupStack , self . BeginPopupStack , self . Viewports , self . CurrentDpiScale , self . CurrentViewport , self . MouseViewport , self . MouseLastHoveredViewport , self . ViewportFrontMostStampCount , self . NavWindow , self . NavId , self . NavFocusScopeId , self . NavActivateId , self . NavActivateDownId , self . NavActivatePressedId , self . NavInputId , self . NavJustTabbedId , self . NavJustMovedToId , self . NavJustMovedToFocusScopeId , self . NavJustMovedToKeyMods , self . NavNextActivateId , self . NavInputSource , self . NavScoringRect , self . NavScoringCount , self . NavLayer , self . NavIdTabCounter , self . NavIdIsAlive , self . NavMousePosDirty , self . NavDisableHighlight , self . NavDisableMouseHover , self . NavAnyRequest , self . NavInitRequest , self . NavInitRequestFromMove , self . NavInitResultId , self . NavInitResultRectRel , self . NavMoveRequest , self . NavMoveRequestFlags , self . NavMoveRequestForward , self . NavMoveRequestKeyMods , self . NavMoveDir , self . NavMoveDirLast , self . NavMoveClipDir , self . NavMoveResultLocal , self . NavMoveResultLocalVisibleSet , self . NavMoveResultOther , self . NavWrapRequestWindow , self . NavWrapRequestFlags , self . NavWindowingTarget , self . NavWindowingTargetAnim , self . NavWindowingListWindow , self . NavWindowingTimer , self . NavWindowingHighlightAlpha , self . NavWindowingToggleLayer , self . FocusRequestCurrWindow , self . FocusRequestNextWindow , self . FocusRequestCurrCounterRegular , self . FocusRequestCurrCounterTabStop , self . FocusRequestNextCounterRegular , self . FocusRequestNextCounterTabStop , self . FocusTabPressed , self . DimBgRatio , self . MouseCursor , self . DragDropActive , self . DragDropWithinSource , self . DragDropWithinTarget , self . DragDropSourceFlags , self . DragDropSourceFrameCount , self . DragDropMouseButton , self . DragDropPayload , self . DragDropTargetRect , self . DragDropTargetId , self . DragDropAcceptFlags , self . DragDropAcceptIdCurrRectSurface , self . DragDropAcceptIdCurr , self . DragDropAcceptIdPrev , self . DragDropAcceptFrameCount , self . DragDropHoldJustPressedId , self . DragDropPayloadBufHeap , self . DragDropPayloadBufLocal , self . CurrentTabBar , self . TabBars , self . CurrentTabBarStack , self . ShrinkWidthBuffer , self . LastValidMousePos , self . InputTextState , self . InputTextPasswordFont , self . TempInputId , self . ColorEditOptions , self . ColorEditLastHue , self . ColorEditLastSat , self . ColorEditLastColor , self . ColorPickerRef , self . SliderCurrentAccum , self . SliderCurrentAccumDirty , self . DragCurrentAccumDirty , self . DragCurrentAccum , self . DragSpeedDefaultRatio , self . ScrollbarClickDeltaToGrabCenter , self . TooltipOverrideCount , self . ClipboardHandlerData , self . MenusIdSubmittedThisFrame , self . PlatformImePos , self . PlatformImeLastPos , self . PlatformImePosViewport , self . PlatformLocaleDecimalPoint , self . DockContext , self . SettingsLoaded , self . SettingsDirtyTimer , self . SettingsIniData , self . SettingsHandlers , self . SettingsWindows , self . LogEnabled , self . LogType , self . LogFile , self . LogBuffer , self . LogLinePosY , self . LogLineFirstItem , self . LogDepthRef , self . LogDepthToExpand , self . LogDepthToExpandDefault , self . DebugItemPickerActive , self . DebugItemPickerBreakId , self . FramerateSecPerFrame . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > () , self . FramerateSecPerFrameIdx , self . FramerateSecPerFrameAccum , self . WantCaptureMouseNextFrame , self . WantCaptureKeyboardNextFrame , self . WantTextInputNextFrame , self . TempBuffer . iter () . enumerate () . map (| (i , v) | format ! ("{}{:?}" , if i > 0 { ", " } else { "" } , v)) . collect :: < String > ())
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiWindowTempData {
    pub CursorPos: ImVec2,
    pub CursorPosPrevLine: ImVec2,
    pub CursorStartPos: ImVec2,
    pub CursorMaxPos: ImVec2,
    pub CurrLineSize: ImVec2,
    pub PrevLineSize: ImVec2,
    pub CurrLineTextBaseOffset: f32,
    pub PrevLineTextBaseOffset: f32,
    pub Indent: ImVec1,
    pub ColumnsOffset: ImVec1,
    pub GroupOffset: ImVec1,
    pub LastItemId: ImGuiID,
    pub LastItemStatusFlags: ImGuiItemStatusFlags,
    pub LastItemRect: ImRect,
    pub LastItemDisplayRect: ImRect,
    pub NavLayerCurrent: ImGuiNavLayer,
    pub NavLayerActiveMask: ::std::os::raw::c_int,
    pub NavLayerActiveMaskNext: ::std::os::raw::c_int,
    pub NavFocusScopeIdCurrent: ImGuiID,
    pub NavHideHighlightOneFrame: bool,
    pub NavHasScroll: bool,
    pub MenuBarAppending: bool,
    pub MenuBarOffset: ImVec2,
    pub MenuColumns: ImGuiMenuColumns,
    pub TreeDepth: ::std::os::raw::c_int,
    pub TreeJumpToParentOnPopMask: ImU32,
    pub ChildWindows: ImVector_ImGuiWindowPtr,
    pub StateStorage: *mut ImGuiStorage,
    pub CurrentColumns: *mut ImGuiColumns,
    pub LayoutType: ImGuiLayoutType,
    pub ParentLayoutType: ImGuiLayoutType,
    pub FocusCounterRegular: ::std::os::raw::c_int,
    pub FocusCounterTabStop: ::std::os::raw::c_int,
    pub ItemFlags: ImGuiItemFlags,
    pub ItemWidth: f32,
    pub TextWrapPos: f32,
    pub ItemFlagsStack: ImVector_ImGuiItemFlags,
    pub ItemWidthStack: ImVector_float,
    pub TextWrapPosStack: ImVector_float,
    pub GroupStack: ImVector_ImGuiGroupData,
    pub StackSizesBackup: [::std::os::raw::c_short; 6usize],
}
#[test]
fn bindgen_test_layout_ImGuiWindowTempData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowTempData>(),
        328usize,
        concat!("Size of: ", stringify!(ImGuiWindowTempData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowTempData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindowTempData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorPos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorPosPrevLine as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorPosPrevLine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorStartPos as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorStartPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorMaxPos as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorMaxPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CurrLineSize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrLineSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).PrevLineSize as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(PrevLineSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CurrLineTextBaseOffset as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).PrevLineTextBaseOffset as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(PrevLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).Indent as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(Indent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).ColumnsOffset as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ColumnsOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).GroupOffset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(GroupOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemId as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemStatusFlags as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemStatusFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemRect as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemDisplayRect as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemDisplayRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavLayerCurrent as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayerCurrent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavLayerActiveMask as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayerActiveMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavLayerActiveMaskNext as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayerActiveMaskNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavFocusScopeIdCurrent as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavFocusScopeIdCurrent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavHideHighlightOneFrame as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavHideHighlightOneFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavHasScroll as *const _ as usize
        },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavHasScroll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).MenuBarAppending as *const _ as usize
        },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuBarAppending)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).MenuBarOffset as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuBarOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).MenuColumns as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuColumns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).TreeDepth as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TreeDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).TreeJumpToParentOnPopMask as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TreeJumpToParentOnPopMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).ChildWindows as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ChildWindows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).StateStorage as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(StateStorage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CurrentColumns as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrentColumns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).LayoutType as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LayoutType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).ParentLayoutType as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ParentLayoutType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).FocusCounterRegular as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(FocusCounterRegular)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).FocusCounterTabStop as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(FocusCounterTabStop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).ItemFlags as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).ItemWidth as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).TextWrapPos as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TextWrapPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).ItemFlagsStack as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemFlagsStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).ItemWidthStack as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemWidthStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).TextWrapPosStack as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TextWrapPosStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).GroupStack as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(GroupStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).StackSizesBackup as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(StackSizesBackup)
        )
    );
}
impl Default for ImGuiWindowTempData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiWindow {
    pub Name: *mut ::std::os::raw::c_char,
    pub ID: ImGuiID,
    pub Flags: ImGuiWindowFlags,
    pub FlagsPreviousFrame: ImGuiWindowFlags,
    pub WindowClass: ImGuiWindowClass,
    pub Viewport: *mut ImGuiViewportP,
    pub ViewportId: ImGuiID,
    pub ViewportPos: ImVec2,
    pub ViewportAllowPlatformMonitorExtend: ::std::os::raw::c_int,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeFull: ImVec2,
    pub ContentSize: ImVec2,
    pub ContentSizeExplicit: ImVec2,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub NameBufLen: ::std::os::raw::c_int,
    pub MoveId: ImGuiID,
    pub ChildId: ImGuiID,
    pub Scroll: ImVec2,
    pub ScrollMax: ImVec2,
    pub ScrollTarget: ImVec2,
    pub ScrollTargetCenterRatio: ImVec2,
    pub ScrollTargetEdgeSnapDist: ImVec2,
    pub ScrollbarSizes: ImVec2,
    pub ScrollbarX: bool,
    pub ScrollbarY: bool,
    pub ViewportOwned: bool,
    pub Active: bool,
    pub WasActive: bool,
    pub WriteAccessed: bool,
    pub Collapsed: bool,
    pub WantCollapseToggle: bool,
    pub SkipItems: bool,
    pub Appearing: bool,
    pub Hidden: bool,
    pub IsFallbackWindow: bool,
    pub HasCloseButton: bool,
    pub ResizeBorderHeld: ::std::os::raw::c_schar,
    pub BeginCount: ::std::os::raw::c_short,
    pub BeginOrderWithinParent: ::std::os::raw::c_short,
    pub BeginOrderWithinContext: ::std::os::raw::c_short,
    pub PopupId: ImGuiID,
    pub AutoFitFramesX: ImS8,
    pub AutoFitFramesY: ImS8,
    pub AutoFitChildAxises: ImS8,
    pub AutoFitOnlyGrows: bool,
    pub AutoPosLastDirection: ImGuiDir,
    pub HiddenFramesCanSkipItems: ::std::os::raw::c_int,
    pub HiddenFramesCannotSkipItems: ::std::os::raw::c_int,
    pub SetWindowPosAllowFlags: ImGuiCond,
    pub SetWindowSizeAllowFlags: ImGuiCond,
    pub SetWindowCollapsedAllowFlags: ImGuiCond,
    pub SetWindowDockAllowFlags: ImGuiCond,
    pub SetWindowPosVal: ImVec2,
    pub SetWindowPosPivot: ImVec2,
    pub IDStack: ImVector_ImGuiID,
    pub DC: ImGuiWindowTempData,
    pub OuterRectClipped: ImRect,
    pub InnerRect: ImRect,
    pub InnerClipRect: ImRect,
    pub WorkRect: ImRect,
    pub ParentWorkRect: ImRect,
    pub ClipRect: ImRect,
    pub ContentRegionRect: ImRect,
    pub HitTestHoleSize: ImVec2ih,
    pub HitTestHoleOffset: ImVec2ih,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameJustFocused: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub ItemWidthDefault: f32,
    pub StateStorage: ImGuiStorage,
    pub ColumnsStorage: ImVector_ImGuiColumns,
    pub FontWindowScale: f32,
    pub FontDpiScale: f32,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub DrawList: *mut ImDrawList,
    pub DrawListInst: ImDrawList,
    pub ParentWindow: *mut ImGuiWindow,
    pub RootWindow: *mut ImGuiWindow,
    pub RootWindowDockStop: *mut ImGuiWindow,
    pub RootWindowForTitleBarHighlight: *mut ImGuiWindow,
    pub RootWindowForNav: *mut ImGuiWindow,
    pub NavLastChildNavWindow: *mut ImGuiWindow,
    pub NavLastIds: [ImGuiID; 2usize],
    pub NavRectRel: [ImRect; 2usize],
    pub MemoryCompacted: bool,
    pub MemoryDrawListIdxCapacity: ::std::os::raw::c_int,
    pub MemoryDrawListVtxCapacity: ::std::os::raw::c_int,
    pub DockNode: *mut ImGuiDockNode,
    pub DockNodeAsHost: *mut ImGuiDockNode,
    pub DockId: ImGuiID,
    pub DockTabItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemRect: ImRect,
    pub DockOrder: ::std::os::raw::c_short,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 5usize],
}
#[test]
fn bindgen_test_layout_ImGuiWindow() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindow>(),
        1176usize,
        concat!("Size of: ", stringify!(ImGuiWindow))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindow>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).FlagsPreviousFrame as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FlagsPreviousFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowClass as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Viewport as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Viewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ViewportId as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ViewportPos as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).ViewportAllowPlatformMonitorExtend as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportAllowPlatformMonitorExtend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Pos as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Size as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SizeFull as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SizeFull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ContentSize as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ContentSizeExplicit as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentSizeExplicit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowPadding as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowRounding as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowBorderSize as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).NameBufLen as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NameBufLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).MoveId as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MoveId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ChildId as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ChildId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Scroll as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Scroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollMax as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollTarget as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).ScrollTargetCenterRatio as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTargetCenterRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).ScrollTargetEdgeSnapDist as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTargetEdgeSnapDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollbarSizes as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarSizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollbarX as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollbarY as *const _ as usize },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ViewportOwned as *const _ as usize },
        190usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportOwned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Active as *const _ as usize },
        191usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WasActive as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WasActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WriteAccessed as *const _ as usize },
        193usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WriteAccessed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Collapsed as *const _ as usize },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Collapsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WantCollapseToggle as *const _ as usize },
        195usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WantCollapseToggle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SkipItems as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SkipItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Appearing as *const _ as usize },
        197usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Appearing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Hidden as *const _ as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Hidden)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).IsFallbackWindow as *const _ as usize },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(IsFallbackWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HasCloseButton as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HasCloseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ResizeBorderHeld as *const _ as usize },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ResizeBorderHeld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).BeginCount as *const _ as usize },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).BeginOrderWithinParent as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginOrderWithinParent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).BeginOrderWithinContext as *const _ as usize
        },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginOrderWithinContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).PopupId as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(PopupId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitFramesX as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitFramesX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitFramesY as *const _ as usize },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitFramesY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitChildAxises as *const _ as usize },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitChildAxises)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitOnlyGrows as *const _ as usize },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitOnlyGrows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).AutoPosLastDirection as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoPosLastDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).HiddenFramesCanSkipItems as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HiddenFramesCanSkipItems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).HiddenFramesCannotSkipItems as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HiddenFramesCannotSkipItems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowPosAllowFlags as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowPosAllowFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowSizeAllowFlags as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowSizeAllowFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowCollapsedAllowFlags as *const _
                as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowCollapsedAllowFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowDockAllowFlags as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowDockAllowFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowPosVal as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowPosVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowPosPivot as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowPosPivot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).IDStack as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(IDStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DC as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).OuterRectClipped as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(OuterRectClipped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).InnerRect as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(InnerRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).InnerClipRect as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(InnerClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WorkRect as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WorkRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ParentWorkRect as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ParentWorkRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ClipRect as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ContentRegionRect as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentRegionRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HitTestHoleSize as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HitTestHoleSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HitTestHoleOffset as *const _ as usize },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HitTestHoleOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).LastFrameActive as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).LastFrameJustFocused as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastFrameJustFocused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).LastTimeActive as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastTimeActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ItemWidthDefault as *const _ as usize },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ItemWidthDefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).StateStorage as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(StateStorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ColumnsStorage as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ColumnsStorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).FontWindowScale as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FontWindowScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).FontDpiScale as *const _ as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FontDpiScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SettingsOffset as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SettingsOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DrawList as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DrawList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DrawListInst as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DrawListInst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ParentWindow as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ParentWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).RootWindow as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).RootWindowDockStop as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowDockStop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).RootWindowForTitleBarHighlight as *const _
                as usize
        },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowForTitleBarHighlight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).RootWindowForNav as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowForNav)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).NavLastChildNavWindow as *const _ as usize
        },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavLastChildNavWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).NavLastIds as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavLastIds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).NavRectRel as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavRectRel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).MemoryCompacted as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryCompacted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).MemoryDrawListIdxCapacity as *const _ as usize
        },
        1116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryDrawListIdxCapacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).MemoryDrawListVtxCapacity as *const _ as usize
        },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryDrawListVtxCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockNode as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockNodeAsHost as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockNodeAsHost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockId as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).DockTabItemStatusFlags as *const _ as usize
        },
        1148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockTabItemStatusFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockTabItemRect as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockTabItemRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockOrder as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockOrder)
        )
    );
}
impl Default for ImGuiWindow {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ImGuiWindow {
    #[inline]
    pub fn DockIsActive(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockIsActive(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockTabIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockTabWantClose(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabWantClose(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        DockIsActive: bool,
        DockTabIsVisible: bool,
        DockTabWantClose: bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DockIsActive: u8 = unsafe { ::std::mem::transmute(DockIsActive) };
            DockIsActive as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let DockTabIsVisible: u8 = unsafe { ::std::mem::transmute(DockTabIsVisible) };
            DockTabIsVisible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let DockTabWantClose: u8 = unsafe { ::std::mem::transmute(DockTabWantClose) };
            DockTabWantClose as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiLastItemDataBackup {
    pub LastItemId: ImGuiID,
    pub LastItemStatusFlags: ImGuiItemStatusFlags,
    pub LastItemRect: ImRect,
    pub LastItemDisplayRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiLastItemDataBackup() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiLastItemDataBackup>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiLastItemDataBackup))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiLastItemDataBackup>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiLastItemDataBackup))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemStatusFlags as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemStatusFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemRect as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemDisplayRect as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemDisplayRect)
        )
    );
}
pub const ImGuiTabBarFlags_DockNode: ImGuiTabBarFlagsPrivate_ = 1048576;
pub const ImGuiTabBarFlags_IsFocused: ImGuiTabBarFlagsPrivate_ = 2097152;
pub const ImGuiTabBarFlags_SaveSettings: ImGuiTabBarFlagsPrivate_ = 4194304;
pub type ImGuiTabBarFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiTabItemFlags_NoCloseButton: ImGuiTabItemFlagsPrivate_ = 1048576;
pub const ImGuiTabItemFlags_Button: ImGuiTabItemFlagsPrivate_ = 2097152;
pub const ImGuiTabItemFlags_Unsorted: ImGuiTabItemFlagsPrivate_ = 4194304;
pub const ImGuiTabItemFlags_Preview: ImGuiTabItemFlagsPrivate_ = 8388608;
pub type ImGuiTabItemFlagsPrivate_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiTabItem {
    pub ID: ImGuiID,
    pub Flags: ImGuiTabItemFlags,
    pub Window: *mut ImGuiWindow,
    pub LastFrameVisible: ::std::os::raw::c_int,
    pub LastFrameSelected: ::std::os::raw::c_int,
    pub Offset: f32,
    pub Width: f32,
    pub ContentWidth: f32,
    pub NameOffset: ImS16,
    pub BeginOrder: ImS8,
    pub IndexDuringLayout: ImS8,
    pub WantClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTabItem() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTabItem>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiTabItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTabItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTabItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Window as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).LastFrameVisible as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(LastFrameVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).LastFrameSelected as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(LastFrameSelected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Width as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).ContentWidth as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(ContentWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).NameOffset as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(NameOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).BeginOrder as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(BeginOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).IndexDuringLayout as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(IndexDuringLayout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).WantClose as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(WantClose)
        )
    );
}
impl Default for ImGuiTabItem {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiTabBar {
    pub Tabs: ImVector_ImGuiTabItem,
    pub ID: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub NextSelectedTabId: ImGuiID,
    pub VisibleTabId: ImGuiID,
    pub CurrFrameVisible: ::std::os::raw::c_int,
    pub PrevFrameVisible: ::std::os::raw::c_int,
    pub BarRect: ImRect,
    pub LastTabContentHeight: f32,
    pub WidthAllTabs: f32,
    pub WidthAllTabsIdeal: f32,
    pub ScrollingAnim: f32,
    pub ScrollingTarget: f32,
    pub ScrollingTargetDistToVisibility: f32,
    pub ScrollingSpeed: f32,
    pub ScrollingRectMinX: f32,
    pub ScrollingRectMaxX: f32,
    pub Flags: ImGuiTabBarFlags,
    pub ReorderRequestTabId: ImGuiID,
    pub ReorderRequestDir: ImS8,
    pub TabsActiveCount: ImS8,
    pub WantLayout: bool,
    pub VisibleTabWasSubmitted: bool,
    pub TabsAddedNew: bool,
    pub LastTabItemIdx: ::std::os::raw::c_short,
    pub FramePadding: ImVec2,
    pub TabsNames: ImGuiTextBuffer,
}
#[test]
fn bindgen_test_layout_ImGuiTabBar() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTabBar>(),
        136usize,
        concat!("Size of: ", stringify!(ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTabBar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).Tabs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(Tabs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ID as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).SelectedTabId as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(SelectedTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).NextSelectedTabId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(NextSelectedTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).VisibleTabId as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(VisibleTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).CurrFrameVisible as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(CurrFrameVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).PrevFrameVisible as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(PrevFrameVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).BarRect as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(BarRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiTabBar>())).LastTabContentHeight as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(LastTabContentHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).WidthAllTabs as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WidthAllTabs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).WidthAllTabsIdeal as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WidthAllTabsIdeal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingAnim as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingAnim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingTarget as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingTarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingTargetDistToVisibility as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingTargetDistToVisibility)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingSpeed as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingSpeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingRectMinX as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingRectMinX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingRectMaxX as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingRectMaxX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).Flags as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ReorderRequestTabId as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ReorderRequestTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ReorderRequestDir as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ReorderRequestDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).TabsActiveCount as *const _ as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsActiveCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).WantLayout as *const _ as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WantLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiTabBar>())).VisibleTabWasSubmitted as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(VisibleTabWasSubmitted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).TabsAddedNew as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsAddedNew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).LastTabItemIdx as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(LastTabItemIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).FramePadding as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(FramePadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).TabsNames as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsNames)
        )
    );
}
impl Default for ImGuiTabBar {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec2_ImVec2Nil() -> *mut ImVec2;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec2_destroy(self_: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec2_ImVec2Float(_x: f32, _y: f32) -> *mut ImVec2;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec4_ImVec4Nil() -> *mut ImVec4;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec4_destroy(self_: *mut ImVec4);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec4_ImVec4Float(_x: f32, _y: f32, _z: f32, _w: f32) -> *mut ImVec4;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDestroyContext(ctx: *mut ImGuiContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetCurrentContext() -> *mut ImGuiContext;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetCurrentContext(ctx: *mut ImGuiContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetIO() -> *mut ImGuiIO;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetStyle() -> *mut ImGuiStyle;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igNewFrame();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndFrame();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRender();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetDrawData() -> *mut ImDrawData;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShowDemoWindow(p_open: *mut bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShowAboutWindow(p_open: *mut bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShowMetricsWindow(p_open: *mut bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShowStyleEditor(ref_: *mut ImGuiStyle);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShowFontSelector(label: *const ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShowUserGuide();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetVersion() -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igStyleColorsDark(dst: *mut ImGuiStyle);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igStyleColorsClassic(dst: *mut ImGuiStyle);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igStyleColorsLight(dst: *mut ImGuiStyle);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBegin(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEnd();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginChildStr(
        str_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginChildID(id: ImGuiID, size: ImVec2, border: bool, flags: ImGuiWindowFlags)
        -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndChild();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsWindowAppearing() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsWindowCollapsed() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowDrawList() -> *mut ImDrawList;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowDpiScale() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowViewport() -> *mut ImGuiViewport;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowPos(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowSize(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowWidth() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowHeight() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowPos(pos: ImVec2, cond: ImGuiCond, pivot: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowSize(size: ImVec2, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowSizeConstraints(
        size_min: ImVec2,
        size_max: ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::std::os::raw::c_void,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowContentSize(size: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowFocus();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowBgAlpha(alpha: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowViewport(viewport_id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowPosVec2(pos: ImVec2, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowSizeVec2(size: ImVec2, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowCollapsedBool(collapsed: bool, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowFocusNil();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowFontScale(scale: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowPosStr(name: *const ::std::os::raw::c_char, pos: ImVec2, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowSizeStr(name: *const ::std::os::raw::c_char, size: ImVec2, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowCollapsedStr(
        name: *const ::std::os::raw::c_char,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowFocusStr(name: *const ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetContentRegionMax(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetContentRegionAvail(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowContentRegionMin(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowContentRegionMax(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowContentRegionWidth() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetScrollX() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetScrollY() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetScrollMaxX() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetScrollMaxY() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetScrollXFloat(scroll_x: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetScrollYFloat(scroll_y: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetScrollHereX(center_x_ratio: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetScrollHereY(center_y_ratio: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetScrollFromPosXFloat(local_x: f32, center_x_ratio: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetScrollFromPosYFloat(local_y: f32, center_y_ratio: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushFont(font: *mut ImFont);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopFont();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushStyleColorU32(idx: ImGuiCol, col: ImU32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushStyleColorVec4(idx: ImGuiCol, col: ImVec4);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopStyleColor(count: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushStyleVarFloat(idx: ImGuiStyleVar, val: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushStyleVarVec2(idx: ImGuiStyleVar, val: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopStyleVar(count: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetFont() -> *mut ImFont;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetFontSize() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetFontTexUvWhitePixel(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetColorU32Col(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetColorU32Vec4(col: ImVec4) -> ImU32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetColorU32U32(col: ImU32) -> ImU32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushItemWidth(item_width: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopItemWidth();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextItemWidth(item_width: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCalcItemWidth() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushTextWrapPos(wrap_local_pos_x: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopTextWrapPos();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushAllowKeyboardFocus(allow_keyboard_focus: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopAllowKeyboardFocus();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushButtonRepeat(repeat: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopButtonRepeat();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSeparator();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSameLine(offset_from_start_x: f32, spacing: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igNewLine();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSpacing();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDummy(size: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIndent(indent_w: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igUnindent(indent_w: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginGroup();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndGroup();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetCursorPos(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetCursorPosX() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetCursorPosY() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetCursorPos(local_pos: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetCursorPosX(local_x: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetCursorPosY(local_y: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetCursorStartPos(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetCursorScreenPos(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetCursorScreenPos(pos: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igAlignTextToFramePadding();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetTextLineHeight() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetTextLineHeightWithSpacing() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetFrameHeight() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetFrameHeightWithSpacing() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushIDStr(str_id: *const ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushIDStrStr(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushIDPtr(ptr_id: *const ::std::os::raw::c_void);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushIDInt(int_id: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopID();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetIDStr(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetIDStrStr(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetIDPtr(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTextUnformatted(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igText(fmt: *const ::std::os::raw::c_char, ...);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTextColored(col: ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLabelText(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBulletText(fmt: *const ::std::os::raw::c_char, ...);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igButton(label: *const ::std::os::raw::c_char, size: ImVec2) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSmallButton(label: *const ::std::os::raw::c_char) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInvisibleButton(
        str_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImage(
        user_texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        tint_col: ImVec4,
        border_col: ImVec4,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImageButton(
        user_texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        frame_padding: ::std::os::raw::c_int,
        bg_col: ImVec4,
        tint_col: ImVec4,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCheckbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCheckboxFlags(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_uint,
        flags_value: ::std::os::raw::c_uint,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRadioButtonBool(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRadioButtonIntPtr(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_button: ::std::os::raw::c_int,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igProgressBar(fraction: f32, size_arg: ImVec2, overlay: *const ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBullet();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginCombo(
        label: *const ::std::os::raw::c_char,
        preview_value: *const ::std::os::raw::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndCombo();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igComboStr_arr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igComboStr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igComboFnBoolPtr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragFloatRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragIntRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderAngle(
        label: *const ::std::os::raw::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igVSliderFloat(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igVSliderInt(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igVSliderScalar(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputText(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputTextMultiline(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        size: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputTextWithHint(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        step_fast: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputDouble(
        label: *const ::std::os::raw::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorEdit3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorEdit4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorPicker3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorPicker4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorButton(
        desc_id: *const ::std::os::raw::c_char,
        col: ImVec4,
        flags: ImGuiColorEditFlags,
        size: ImVec2,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetColorEditOptions(flags: ImGuiColorEditFlags);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreeNodeStr(label: *const ::std::os::raw::c_char) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreeNodeStrStr(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreeNodePtr(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreeNodeExStr(label: *const ::std::os::raw::c_char, flags: ImGuiTreeNodeFlags)
        -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreeNodeExStrStr(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreeNodeExPtr(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreePushStr(str_id: *const ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreePushPtr(ptr_id: *const ::std::os::raw::c_void);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreePop();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetTreeNodeToLabelSpacing() -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCollapsingHeaderTreeNodeFlags(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCollapsingHeaderBoolPtr(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSelectableBool(
        label: *const ::std::os::raw::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSelectableBoolPtr(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igListBoxStr_arr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igListBoxFnBoolPtr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igListBoxHeaderVec2(label: *const ::std::os::raw::c_char, size: ImVec2) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igListBoxHeaderInt(
        label: *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igListBoxFooter();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPlotLinesFloatPtr(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPlotLinesFnFloatPtr(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPlotHistogramFloatPtr(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPlotHistogramFnFloatPtr(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igValueBool(prefix: *const ::std::os::raw::c_char, b: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igValueInt(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igValueUint(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_uint);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igValueFloat(
        prefix: *const ::std::os::raw::c_char,
        v: f32,
        float_format: *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginMenuBar() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndMenuBar();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginMainMenuBar() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndMainMenuBar();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginMenu(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndMenu();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igMenuItemBool(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igMenuItemBoolPtr(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginTooltip();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndTooltip();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginPopupModal(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndPopup();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igOpenPopup(str_id: *const ::std::os::raw::c_char, popup_flags: ImGuiPopupFlags);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igOpenPopupOnItemClick(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCloseCurrentPopup();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginPopupContextItem(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginPopupContextWindow(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginPopupContextVoid(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsPopupOpenStr(str_id: *const ::std::os::raw::c_char, flags: ImGuiPopupFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColumns(count: ::std::os::raw::c_int, id: *const ::std::os::raw::c_char, border: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igNextColumn();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetColumnIndex() -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetColumnsCount() -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginTabBar(str_id: *const ::std::os::raw::c_char, flags: ImGuiTabBarFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndTabBar();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginTabItem(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndTabItem();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabItemButton(label: *const ::std::os::raw::c_char, flags: ImGuiTabItemFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetTabItemClosed(tab_or_docked_window_label: *const ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockSpace(
        id: ImGuiID,
        size: ImVec2,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockSpaceOverViewport(
        viewport: *mut ImGuiViewport,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowClass(window_class: *const ImGuiWindowClass);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowDockID() -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsWindowDocked() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLogToTTY(auto_open_depth: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLogToFile(
        auto_open_depth: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLogToClipboard(auto_open_depth: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLogFinish();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLogButtons();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        sz: usize,
        cond: ImGuiCond,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndDragDropSource();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginDragDropTarget() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igAcceptDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> *const ImGuiPayload;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndDragDropTarget();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetDragDropPayload() -> *const ImGuiPayload;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushClipRect(
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopClipRect();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetItemDefaultFocus();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetKeyboardFocusHere(offset: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemActive() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemFocused() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemClicked(mouse_button: ImGuiMouseButton) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemVisible() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemEdited() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemActivated() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemDeactivated() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemDeactivatedAfterEdit() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemToggledOpen() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsAnyItemHovered() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsAnyItemActive() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsAnyItemFocused() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetItemRectMin(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetItemRectMax(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetItemRectSize(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetItemAllowOverlap();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsRectVisibleNil(size: ImVec2) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsRectVisibleVec2(rect_min: ImVec2, rect_max: ImVec2) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetTime() -> f64;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetFrameCount() -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetBackgroundDrawListNil() -> *mut ImDrawList;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetForegroundDrawListNil() -> *mut ImDrawList;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetBackgroundDrawListViewportPtr(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetForegroundDrawListViewportPtr(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetDrawListSharedData() -> *mut ImDrawListSharedData;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetStateStorage(storage: *mut ImGuiStorage);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetStateStorage() -> *mut ImGuiStorage;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCalcListClipping(
        items_count: ::std::os::raw::c_int,
        items_height: f32,
        out_items_display_start: *mut ::std::os::raw::c_int,
        out_items_display_end: *mut ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginChildFrame(id: ImGuiID, size: ImVec2, flags: ImGuiWindowFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndChildFrame();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCalcTextSize(
        pOut: *mut ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorConvertU32ToFloat4(pOut: *mut ImVec4, in_: ImU32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorConvertFloat4ToU32(in_: ImVec4) -> ImU32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorConvertRGBtoHSV(
        r: f32,
        g: f32,
        b: f32,
        out_h: *mut f32,
        out_s: *mut f32,
        out_v: *mut f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorConvertHSVtoRGB(
        h: f32,
        s: f32,
        v: f32,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetKeyIndex(imgui_key: ImGuiKey) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsKeyDown(user_key_index: ::std::os::raw::c_int) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsKeyPressed(user_key_index: ::std::os::raw::c_int, repeat: bool) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsKeyReleased(user_key_index: ::std::os::raw::c_int) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetKeyPressedAmount(
        key_index: ::std::os::raw::c_int,
        repeat_delay: f32,
        rate: f32,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCaptureKeyboardFromApp(want_capture_keyboard_value: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsMouseDown(button: ImGuiMouseButton) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsMouseClicked(button: ImGuiMouseButton, repeat: bool) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsMouseReleased(button: ImGuiMouseButton) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsMouseDoubleClicked(button: ImGuiMouseButton) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsMouseHoveringRect(r_min: ImVec2, r_max: ImVec2, clip: bool) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsAnyMouseDown() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetMousePos(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetMousePosOnOpeningCurrentPopup(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetMouseDragDelta(pOut: *mut ImVec2, button: ImGuiMouseButton, lock_threshold: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igResetMouseDragDelta(button: ImGuiMouseButton);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetMouseCursor() -> ImGuiMouseCursor;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetMouseCursor(cursor_type: ImGuiMouseCursor);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCaptureMouseFromApp(want_capture_mouse_value: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetClipboardText() -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetClipboardText(text: *const ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLoadIniSettingsFromMemory(ini_data: *const ::std::os::raw::c_char, ini_size: usize);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSaveIniSettingsToMemory(out_ini_size: *mut usize) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDebugCheckVersionAndDataLayout(
        version_str: *const ::std::os::raw::c_char,
        sz_io: usize,
        sz_style: usize,
        sz_vec2: usize,
        sz_vec4: usize,
        sz_drawvert: usize,
        sz_drawidx: usize,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetAllocatorFunctions(
        alloc_func: ::std::option::Option<
            unsafe extern "C" fn(
                sz: usize,
                user_data: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        free_func: ::std::option::Option<
            unsafe extern "C" fn(
                ptr: *mut ::std::os::raw::c_void,
                user_data: *mut ::std::os::raw::c_void,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igMemAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igMemFree(ptr: *mut ::std::os::raw::c_void);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetPlatformIO() -> *mut ImGuiPlatformIO;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetMainViewport() -> *mut ImGuiViewport;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igUpdatePlatformWindows();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderPlatformWindowsDefault(
        platform_render_arg: *mut ::std::os::raw::c_void,
        renderer_render_arg: *mut ::std::os::raw::c_void,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDestroyPlatformWindows();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindViewportByID(id: ImGuiID) -> *mut ImGuiViewport;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindViewportByPlatformHandle(
        platform_handle: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiViewport;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStyle_ImGuiStyle() -> *mut ImGuiStyle;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStyle_destroy(self_: *mut ImGuiStyle);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStyle_ScaleAllSizes(self_: *mut ImGuiStyle, scale_factor: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiIO_AddInputCharacter(self_: *mut ImGuiIO, c: ::std::os::raw::c_uint);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiIO_AddInputCharacterUTF16(self_: *mut ImGuiIO, c: ImWchar16);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiIO_AddInputCharactersUTF8(self_: *mut ImGuiIO, str_: *const ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiIO_ClearInputCharacters(self_: *mut ImGuiIO);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiIO_ImGuiIO() -> *mut ImGuiIO;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiIO_destroy(self_: *mut ImGuiIO);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData() -> *mut ImGuiInputTextCallbackData;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextCallbackData_destroy(self_: *mut ImGuiInputTextCallbackData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextCallbackData_InsertChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextCallbackData_SelectAll(self_: *mut ImGuiInputTextCallbackData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextCallbackData_ClearSelection(self_: *mut ImGuiInputTextCallbackData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextCallbackData_HasSelection(self_: *mut ImGuiInputTextCallbackData) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindowClass_ImGuiWindowClass() -> *mut ImGuiWindowClass;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindowClass_destroy(self_: *mut ImGuiWindowClass);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPayload_ImGuiPayload() -> *mut ImGuiPayload;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPayload_destroy(self_: *mut ImGuiPayload);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPayload_Clear(self_: *mut ImGuiPayload);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPayload_IsDataType(
        self_: *mut ImGuiPayload,
        type_: *const ::std::os::raw::c_char,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPayload_IsPreview(self_: *mut ImGuiPayload) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPayload_IsDelivery(self_: *mut ImGuiPayload) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiOnceUponAFrame_ImGuiOnceUponAFrame() -> *mut ImGuiOnceUponAFrame;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiOnceUponAFrame_destroy(self_: *mut ImGuiOnceUponAFrame);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextFilter_ImGuiTextFilter(
        default_filter: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiTextFilter;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextFilter_destroy(self_: *mut ImGuiTextFilter);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextFilter_Draw(
        self_: *mut ImGuiTextFilter,
        label: *const ::std::os::raw::c_char,
        width: f32,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextFilter_PassFilter(
        self_: *mut ImGuiTextFilter,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextFilter_Build(self_: *mut ImGuiTextFilter);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextFilter_Clear(self_: *mut ImGuiTextFilter);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextFilter_IsActive(self_: *mut ImGuiTextFilter) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextRange_ImGuiTextRangeNil() -> *mut ImGuiTextRange;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextRange_destroy(self_: *mut ImGuiTextRange);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextRange_ImGuiTextRangeStr(
        _b: *const ::std::os::raw::c_char,
        _e: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiTextRange;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextRange_empty(self_: *mut ImGuiTextRange) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextRange_split(
        self_: *mut ImGuiTextRange,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector_ImGuiTextRange,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_ImGuiTextBuffer() -> *mut ImGuiTextBuffer;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_destroy(self_: *mut ImGuiTextBuffer);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_begin(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_end(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_size(self_: *mut ImGuiTextBuffer) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_empty(self_: *mut ImGuiTextBuffer) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_clear(self_: *mut ImGuiTextBuffer);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_reserve(self_: *mut ImGuiTextBuffer, capacity: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_c_str(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_append(
        self_: *mut ImGuiTextBuffer,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePairInt(
        _key: ImGuiID,
        _val_i: ::std::os::raw::c_int,
    ) -> *mut ImGuiStoragePair;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStoragePair_destroy(self_: *mut ImGuiStoragePair);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePairFloat(
        _key: ImGuiID,
        _val_f: f32,
    ) -> *mut ImGuiStoragePair;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePairPtr(
        _key: ImGuiID,
        _val_p: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiStoragePair;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_Clear(self_: *mut ImGuiStorage);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_GetInt(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_SetInt(self_: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_GetBool(self_: *mut ImGuiStorage, key: ImGuiID, default_val: bool) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_SetBool(self_: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_GetFloat(self_: *mut ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_SetFloat(self_: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_GetVoidPtr(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
    ) -> *mut ::std::os::raw::c_void;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_SetVoidPtr(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        val: *mut ::std::os::raw::c_void,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_GetIntRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_GetBoolRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> *mut bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_GetFloatRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: f32,
    ) -> *mut f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_GetVoidPtrRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_SetAllInt(self_: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStorage_BuildSortByKey(self_: *mut ImGuiStorage);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiListClipper_ImGuiListClipper() -> *mut ImGuiListClipper;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiListClipper_destroy(self_: *mut ImGuiListClipper);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiListClipper_Begin(
        self_: *mut ImGuiListClipper,
        items_count: ::std::os::raw::c_int,
        items_height: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiListClipper_End(self_: *mut ImGuiListClipper);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiListClipper_Step(self_: *mut ImGuiListClipper) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImColor_ImColorNil() -> *mut ImColor;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImColor_destroy(self_: *mut ImColor);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImColor_ImColorInt(
        r: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
    ) -> *mut ImColor;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImColor_ImColorU32(rgba: ImU32) -> *mut ImColor;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImColor_ImColorFloat(r: f32, g: f32, b: f32, a: f32) -> *mut ImColor;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImColor_ImColorVec4(col: ImVec4) -> *mut ImColor;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImColor_SetHSV(self_: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImColor_HSV(pOut: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawCmd_ImDrawCmd() -> *mut ImDrawCmd;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawCmd_destroy(self_: *mut ImDrawCmd);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawListSplitter_ImDrawListSplitter() -> *mut ImDrawListSplitter;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawListSplitter_destroy(self_: *mut ImDrawListSplitter);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawListSplitter_Clear(self_: *mut ImDrawListSplitter);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawListSplitter_ClearFreeMemory(self_: *mut ImDrawListSplitter);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawListSplitter_Split(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawListSplitter_Merge(self_: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawListSplitter_SetCurrentChannel(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_ImDrawList(shared_data: *const ImDrawListSharedData) -> *mut ImDrawList;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_destroy(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PushClipRect(
        self_: *mut ImDrawList,
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PushClipRectFullScreen(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PopClipRect(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PushTextureID(self_: *mut ImDrawList, texture_id: ImTextureID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PopTextureID(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_GetClipRectMin(pOut: *mut ImVec2, self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_GetClipRectMax(pOut: *mut ImVec2, self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddLine(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddRect(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
        thickness: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddRectFilled(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddRectFilledMultiColor(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddQuad(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddQuadFilled(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddTriangle(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddTriangleFilled(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddCircle(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddCircleFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddNgon(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddNgonFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddTextVec2(
        self_: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddTextFontPtr(
        self_: *mut ImDrawList,
        font: *const ImFont,
        font_size: f32,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddPolyline(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        closed: bool,
        thickness: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddConvexPolyFilled(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddBezierCurve(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddImage(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddImageQuad(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        uv1: ImVec2,
        uv2: ImVec2,
        uv3: ImVec2,
        uv4: ImVec2,
        col: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddImageRounded(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PathClear(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PathLineTo(self_: *mut ImDrawList, pos: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PathLineToMergeDuplicate(self_: *mut ImDrawList, pos: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PathFillConvex(self_: *mut ImDrawList, col: ImU32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PathStroke(self_: *mut ImDrawList, col: ImU32, closed: bool, thickness: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PathArcTo(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PathArcToFast(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PathBezierCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PathRect(
        self_: *mut ImDrawList,
        rect_min: ImVec2,
        rect_max: ImVec2,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddCallback(
        self_: *mut ImDrawList,
        callback: ImDrawCallback,
        callback_data: *mut ::std::os::raw::c_void,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_AddDrawCmd(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_CloneOutput(self_: *mut ImDrawList) -> *mut ImDrawList;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_ChannelsSplit(self_: *mut ImDrawList, count: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_ChannelsMerge(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_ChannelsSetCurrent(self_: *mut ImDrawList, n: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PrimReserve(
        self_: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PrimUnreserve(
        self_: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PrimRect(self_: *mut ImDrawList, a: ImVec2, b: ImVec2, col: ImU32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PrimRectUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        col: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PrimQuadUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        d: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        uv_c: ImVec2,
        uv_d: ImVec2,
        col: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PrimWriteVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PrimWriteIdx(self_: *mut ImDrawList, idx: ImDrawIdx);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList_PrimVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList__ResetForNewFrame(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList__ClearFreeMemory(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList__PopUnusedDrawCmd(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList__OnChangedClipRect(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList__OnChangedTextureID(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawList__OnChangedVtxOffset(self_: *mut ImDrawList);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawData_ImDrawData() -> *mut ImDrawData;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawData_destroy(self_: *mut ImDrawData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawData_Clear(self_: *mut ImDrawData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawData_DeIndexAllBuffers(self_: *mut ImDrawData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawData_ScaleClipRects(self_: *mut ImDrawData, fb_scale: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontConfig_ImFontConfig() -> *mut ImFontConfig;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontConfig_destroy(self_: *mut ImFontConfig);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder() -> *mut ImFontGlyphRangesBuilder;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontGlyphRangesBuilder_destroy(self_: *mut ImFontGlyphRangesBuilder);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontGlyphRangesBuilder_Clear(self_: *mut ImFontGlyphRangesBuilder);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontGlyphRangesBuilder_GetBit(self_: *mut ImFontGlyphRangesBuilder, n: usize) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontGlyphRangesBuilder_SetBit(self_: *mut ImFontGlyphRangesBuilder, n: usize);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddChar(self_: *mut ImFontGlyphRangesBuilder, c: ImWchar);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddText(
        self_: *mut ImFontGlyphRangesBuilder,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        ranges: *const ImWchar,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector_ImWchar,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlasCustomRect_ImFontAtlasCustomRect() -> *mut ImFontAtlasCustomRect;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlasCustomRect_destroy(self_: *mut ImFontAtlasCustomRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlasCustomRect_IsPacked(self_: *mut ImFontAtlasCustomRect) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_ImFontAtlas() -> *mut ImFontAtlas;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_destroy(self_: *mut ImFontAtlas);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_AddFont(
        self_: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_AddFontDefault(
        self_: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_AddFontFromFileTTF(
        self_: *mut ImFontAtlas,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        self_: *mut ImFontAtlas,
        font_data: *mut ::std::os::raw::c_void,
        font_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        self_: *mut ImFontAtlas,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        self_: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_ClearInputData(self_: *mut ImFontAtlas);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_ClearTexData(self_: *mut ImFontAtlas);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_ClearFonts(self_: *mut ImFontAtlas);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_Clear(self_: *mut ImFontAtlas);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_Build(self_: *mut ImFontAtlas) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetTexDataAsAlpha8(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetTexDataAsRGBA32(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_IsBuilt(self_: *mut ImFontAtlas) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_SetTexID(self_: *mut ImFontAtlas, id: ImTextureID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesDefault(self_: *mut ImFontAtlas) -> *const ImWchar;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesKorean(self_: *mut ImFontAtlas) -> *const ImWchar;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesJapanese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(self_: *mut ImFontAtlas) -> *const ImWchar;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
        self_: *mut ImFontAtlas,
    ) -> *const ImWchar;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(self_: *mut ImFontAtlas) -> *const ImWchar;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesThai(self_: *mut ImFontAtlas) -> *const ImWchar;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesVietnamese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_AddCustomRectRegular(
        self_: *mut ImFontAtlas,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_AddCustomRectFontGlyph(
        self_: *mut ImFontAtlas,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: ImVec2,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetCustomRectByIndex(
        self_: *mut ImFontAtlas,
        index: ::std::os::raw::c_int,
    ) -> *mut ImFontAtlasCustomRect;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_CalcCustomRectUV(
        self_: *mut ImFontAtlas,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFontAtlas_GetMouseCursorTexData(
        self_: *mut ImFontAtlas,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_ImFont() -> *mut ImFont;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_destroy(self_: *mut ImFont);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_FindGlyph(self_: *mut ImFont, c: ImWchar) -> *const ImFontGlyph;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_FindGlyphNoFallback(self_: *mut ImFont, c: ImWchar) -> *const ImFontGlyph;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_GetCharAdvance(self_: *mut ImFont, c: ImWchar) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_IsLoaded(self_: *mut ImFont) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_GetDebugName(self_: *mut ImFont) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_CalcTextSizeA(
        pOut: *mut ImVec2,
        self_: *mut ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_CalcWordWrapPositionA(
        self_: *mut ImFont,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_RenderChar(
        self_: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        c: ImWchar,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_RenderText(
        self_: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        clip_rect: ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_BuildLookupTable(self_: *mut ImFont);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_ClearOutputData(self_: *mut ImFont);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_GrowIndex(self_: *mut ImFont, new_size: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_AddGlyph(
        self_: *mut ImFont,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_AddRemapChar(self_: *mut ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_SetGlyphVisible(self_: *mut ImFont, c: ImWchar, visible: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_SetFallbackChar(self_: *mut ImFont, c: ImWchar);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImFont_IsGlyphRangeUnused(
        self_: *mut ImFont,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPlatformIO_ImGuiPlatformIO() -> *mut ImGuiPlatformIO;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPlatformIO_destroy(self_: *mut ImGuiPlatformIO);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPlatformMonitor_ImGuiPlatformMonitor() -> *mut ImGuiPlatformMonitor;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPlatformMonitor_destroy(self_: *mut ImGuiPlatformMonitor);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiViewport_ImGuiViewport() -> *mut ImGuiViewport;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiViewport_destroy(self_: *mut ImGuiViewport);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiViewport_GetCenter(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiViewport_GetWorkPos(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiViewport_GetWorkSize(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImHashData(
        data: *const ::std::os::raw::c_void,
        data_size: usize,
        seed: ImU32,
    ) -> ImU32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImHashStr(data: *const ::std::os::raw::c_char, data_size: usize, seed: ImU32)
        -> ImU32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImAlphaBlendColors(col_a: ImU32, col_b: ImU32) -> ImU32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImIsPowerOfTwo(v: ::std::os::raw::c_int) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImUpperPowerOfTwo(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStricmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStrnicmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStrncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        count: usize,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStrdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStrdupcpy(
        dst: *mut ::std::os::raw::c_char,
        p_dst_size: *mut usize,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStrchrRange(
        str_begin: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStrlenW(str_: *const ImWchar) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStreolRange(
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStrbolW(buf_mid_line: *const ImWchar, buf_begin: *const ImWchar) -> *const ImWchar;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStristr(
        haystack: *const ::std::os::raw::c_char,
        haystack_end: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStrTrimBlanks(str_: *mut ::std::os::raw::c_char);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImStrSkipBlank(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImParseFormatFindStart(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImParseFormatFindEnd(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImParseFormatTrimDecorations(
        format: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImParseFormatPrecision(
        format: *const ::std::os::raw::c_char,
        default_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImCharIsBlankA(c: ::std::os::raw::c_char) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImCharIsBlankW(c: ::std::os::raw::c_uint) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImTextStrToUtf8(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImTextCharFromUtf8(
        out_char: *mut ::std::os::raw::c_uint,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImTextStrFromUtf8(
        buf: *mut ImWchar,
        buf_size: ::std::os::raw::c_int,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
        in_remaining: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImTextCountCharsFromUtf8(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImTextCountUtf8BytesFromChar(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImTextCountUtf8BytesFromStr(
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFileOpen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ImFileHandle;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFileClose(file: ImFileHandle) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFileGetSize(file: ImFileHandle) -> ImU64;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFileRead(
        data: *mut ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFileWrite(
        data: *const ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFileLoadToMemory(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        out_file_size: *mut usize,
        padding_bytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImPowFloat(x: f32, y: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImPowdouble(x: f64, y: f64) -> f64;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImLogFloat(x: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImLogdouble(x: f64) -> f64;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImAbsFloat(x: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImAbsdouble(x: f64) -> f64;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImSignFloat(x: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImSigndouble(x: f64) -> f64;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImMin(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImMax(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImClamp(pOut: *mut ImVec2, v: ImVec2, mn: ImVec2, mx: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImLerpVec2Float(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, t: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImLerpVec2Vec2(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, t: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImLerpVec4(pOut: *mut ImVec4, a: ImVec4, b: ImVec4, t: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImSaturate(f: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImLengthSqrVec2(lhs: ImVec2) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImLengthSqrVec4(lhs: ImVec4) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImInvLength(lhs: ImVec2, fail_value: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFloorFloat(f: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFloorVec2(pOut: *mut ImVec2, v: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImModPositive(
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImDot(a: ImVec2, b: ImVec2) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImRotate(pOut: *mut ImVec2, v: ImVec2, cos_a: f32, sin_a: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImLinearSweep(current: f32, target: f32, speed: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImMul(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImBezierCalc(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        t: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImBezierClosestPoint(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        p: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImBezierClosestPointCasteljau(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        p: ImVec2,
        tess_tol: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImLineClosestPoint(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, p: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImTriangleContainsPoint(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImTriangleClosestPoint(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImTriangleBarycentricCoords(
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        p: ImVec2,
        out_u: *mut f32,
        out_v: *mut f32,
        out_w: *mut f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImTriangleArea(a: ImVec2, b: ImVec2, c: ImVec2) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImGetDirQuadrantFromDelta(dx: f32, dy: f32) -> ImGuiDir;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec1_ImVec1Nil() -> *mut ImVec1;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec1_destroy(self_: *mut ImVec1);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec1_ImVec1Float(_x: f32) -> *mut ImVec1;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec2ih_ImVec2ihNil() -> *mut ImVec2ih;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec2ih_destroy(self_: *mut ImVec2ih);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec2ih_ImVec2ihshort(
        _x: ::std::os::raw::c_short,
        _y: ::std::os::raw::c_short,
    ) -> *mut ImVec2ih;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImVec2ih_ImVec2ihVec2(rhs: ImVec2) -> *mut ImVec2ih;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ImRectNil() -> *mut ImRect;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_destroy(self_: *mut ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ImRectVec2(min: ImVec2, max: ImVec2) -> *mut ImRect;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ImRectVec4(v: ImVec4) -> *mut ImRect;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ImRectFloat(x1: f32, y1: f32, x2: f32, y2: f32) -> *mut ImRect;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_GetCenter(pOut: *mut ImVec2, self_: *mut ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_GetSize(pOut: *mut ImVec2, self_: *mut ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_GetWidth(self_: *mut ImRect) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_GetHeight(self_: *mut ImRect) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_GetTL(pOut: *mut ImVec2, self_: *mut ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_GetTR(pOut: *mut ImVec2, self_: *mut ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_GetBL(pOut: *mut ImVec2, self_: *mut ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_GetBR(pOut: *mut ImVec2, self_: *mut ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ContainsVec2(self_: *mut ImRect, p: ImVec2) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ContainsRect(self_: *mut ImRect, r: ImRect) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_Overlaps(self_: *mut ImRect, r: ImRect) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_AddVec2(self_: *mut ImRect, p: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_AddRect(self_: *mut ImRect, r: ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ExpandFloat(self_: *mut ImRect, amount: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ExpandVec2(self_: *mut ImRect, amount: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_Translate(self_: *mut ImRect, d: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_TranslateX(self_: *mut ImRect, dx: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_TranslateY(self_: *mut ImRect, dy: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ClipWith(self_: *mut ImRect, r: ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ClipWithFull(self_: *mut ImRect, r: ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_Floor(self_: *mut ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_IsInverted(self_: *mut ImRect) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImRect_ToVec4(pOut: *mut ImVec4, self_: *mut ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImBitArrayTestBit(arr: *const ImU32, n: ::std::os::raw::c_int) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImBitArrayClearBit(arr: *mut ImU32, n: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImBitArraySetBit(arr: *mut ImU32, n: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImBitArraySetBitRange(
        arr: *mut ImU32,
        n: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImBitVector_Create(self_: *mut ImBitVector, sz: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImBitVector_Clear(self_: *mut ImBitVector);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImBitVector_TestBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImBitVector_SetBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImBitVector_ClearBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawListSharedData_ImDrawListSharedData() -> *mut ImDrawListSharedData;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawListSharedData_destroy(self_: *mut ImDrawListSharedData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawListSharedData_SetCircleSegmentMaxError(
        self_: *mut ImDrawListSharedData,
        max_error: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawDataBuilder_Clear(self_: *mut ImDrawDataBuilder);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawDataBuilder_ClearFreeMemory(self_: *mut ImDrawDataBuilder);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImDrawDataBuilder_FlattenIntoSingleLayer(self_: *mut ImDrawDataBuilder);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleModInt(
        idx: ImGuiStyleVar,
        v: ::std::os::raw::c_int,
    ) -> *mut ImGuiStyleMod;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStyleMod_destroy(self_: *mut ImGuiStyleMod);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleModFloat(idx: ImGuiStyleVar, v: f32) -> *mut ImGuiStyleMod;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleModVec2(idx: ImGuiStyleVar, v: ImVec2) -> *mut ImGuiStyleMod;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiMenuColumns_ImGuiMenuColumns() -> *mut ImGuiMenuColumns;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiMenuColumns_destroy(self_: *mut ImGuiMenuColumns);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiMenuColumns_Update(
        self_: *mut ImGuiMenuColumns,
        count: ::std::os::raw::c_int,
        spacing: f32,
        clear: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiMenuColumns_DeclColumns(
        self_: *mut ImGuiMenuColumns,
        w0: f32,
        w1: f32,
        w2: f32,
    ) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiMenuColumns_CalcExtraSpace(self_: *mut ImGuiMenuColumns, avail_w: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_ImGuiInputTextState() -> *mut ImGuiInputTextState;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_destroy(self_: *mut ImGuiInputTextState);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_ClearText(self_: *mut ImGuiInputTextState);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_ClearFreeMemory(self_: *mut ImGuiInputTextState);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_GetUndoAvailCount(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_GetRedoAvailCount(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_OnKeyPressed(
        self_: *mut ImGuiInputTextState,
        key: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_CursorAnimReset(self_: *mut ImGuiInputTextState);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_CursorClamp(self_: *mut ImGuiInputTextState);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_HasSelection(self_: *mut ImGuiInputTextState) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_ClearSelection(self_: *mut ImGuiInputTextState);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiInputTextState_SelectAll(self_: *mut ImGuiInputTextState);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPopupData_ImGuiPopupData() -> *mut ImGuiPopupData;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPopupData_destroy(self_: *mut ImGuiPopupData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiNavMoveResult_ImGuiNavMoveResult() -> *mut ImGuiNavMoveResult;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiNavMoveResult_destroy(self_: *mut ImGuiNavMoveResult);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiNavMoveResult_Clear(self_: *mut ImGuiNavMoveResult);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiNextWindowData_ImGuiNextWindowData() -> *mut ImGuiNextWindowData;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiNextWindowData_destroy(self_: *mut ImGuiNextWindowData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiNextWindowData_ClearFlags(self_: *mut ImGuiNextWindowData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiNextItemData_ImGuiNextItemData() -> *mut ImGuiNextItemData;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiNextItemData_destroy(self_: *mut ImGuiNextItemData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiNextItemData_ClearFlags(self_: *mut ImGuiNextItemData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPtrOrIndex_ImGuiPtrOrIndexPtr(
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiPtrOrIndex;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPtrOrIndex_destroy(self_: *mut ImGuiPtrOrIndex);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiPtrOrIndex_ImGuiPtrOrIndexInt(index: ::std::os::raw::c_int)
        -> *mut ImGuiPtrOrIndex;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiColumnData_ImGuiColumnData() -> *mut ImGuiColumnData;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiColumnData_destroy(self_: *mut ImGuiColumnData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiColumns_ImGuiColumns() -> *mut ImGuiColumns;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiColumns_destroy(self_: *mut ImGuiColumns);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiColumns_Clear(self_: *mut ImGuiColumns);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_ImGuiDockNode(id: ImGuiID) -> *mut ImGuiDockNode;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_destroy(self_: *mut ImGuiDockNode);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_IsRootNode(self_: *mut ImGuiDockNode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_IsDockSpace(self_: *mut ImGuiDockNode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_IsFloatingNode(self_: *mut ImGuiDockNode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_IsCentralNode(self_: *mut ImGuiDockNode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_IsHiddenTabBar(self_: *mut ImGuiDockNode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_IsNoTabBar(self_: *mut ImGuiDockNode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_IsSplitNode(self_: *mut ImGuiDockNode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_IsLeafNode(self_: *mut ImGuiDockNode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_IsEmpty(self_: *mut ImGuiDockNode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_GetMergedFlags(self_: *mut ImGuiDockNode) -> ImGuiDockNodeFlags;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockNode_Rect(pOut: *mut ImRect, self_: *mut ImGuiDockNode);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockContext_ImGuiDockContext() -> *mut ImGuiDockContext;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiDockContext_destroy(self_: *mut ImGuiDockContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiViewportP_ImGuiViewportP() -> *mut ImGuiViewportP;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiViewportP_destroy(self_: *mut ImGuiViewportP);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiViewportP_GetMainRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiViewportP_GetWorkRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiViewportP_ClearRequestFlags(self_: *mut ImGuiViewportP);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindowSettings_ImGuiWindowSettings() -> *mut ImGuiWindowSettings;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindowSettings_destroy(self_: *mut ImGuiWindowSettings);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindowSettings_GetName(
        self_: *mut ImGuiWindowSettings,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiSettingsHandler_ImGuiSettingsHandler() -> *mut ImGuiSettingsHandler;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiSettingsHandler_destroy(self_: *mut ImGuiSettingsHandler);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiContext_ImGuiContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiContext_destroy(self_: *mut ImGuiContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindowTempData_ImGuiWindowTempData() -> *mut ImGuiWindowTempData;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindowTempData_destroy(self_: *mut ImGuiWindowTempData);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_ImGuiWindow(
        context: *mut ImGuiContext,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindow;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_destroy(self_: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_GetIDStr(
        self_: *mut ImGuiWindow,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_GetIDPtr(
        self_: *mut ImGuiWindow,
        ptr: *const ::std::os::raw::c_void,
    ) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_GetIDInt(self_: *mut ImGuiWindow, n: ::std::os::raw::c_int) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_GetIDNoKeepAliveStr(
        self_: *mut ImGuiWindow,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_GetIDNoKeepAlivePtr(
        self_: *mut ImGuiWindow,
        ptr: *const ::std::os::raw::c_void,
    ) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_GetIDNoKeepAliveInt(
        self_: *mut ImGuiWindow,
        n: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_GetIDFromRectangle(self_: *mut ImGuiWindow, r_abs: ImRect) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_Rect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_CalcFontSize(self_: *mut ImGuiWindow) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_TitleBarHeight(self_: *mut ImGuiWindow) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_TitleBarRect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_MenuBarHeight(self_: *mut ImGuiWindow) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiWindow_MenuBarRect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiLastItemDataBackup_ImGuiLastItemDataBackup() -> *mut ImGuiLastItemDataBackup;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiLastItemDataBackup_destroy(self_: *mut ImGuiLastItemDataBackup);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiLastItemDataBackup_Backup(self_: *mut ImGuiLastItemDataBackup);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiLastItemDataBackup_Restore(self_: *mut ImGuiLastItemDataBackup);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTabItem_ImGuiTabItem() -> *mut ImGuiTabItem;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTabItem_destroy(self_: *mut ImGuiTabItem);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTabBar_ImGuiTabBar() -> *mut ImGuiTabBar;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTabBar_destroy(self_: *mut ImGuiTabBar);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTabBar_GetTabOrder(
        self_: *mut ImGuiTabBar,
        tab: *const ImGuiTabItem,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTabBar_GetTabName(
        self_: *mut ImGuiTabBar,
        tab: *const ImGuiTabItem,
    ) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetCurrentWindowRead() -> *mut ImGuiWindow;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetCurrentWindow() -> *mut ImGuiWindow;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindWindowByID(id: ImGuiID) -> *mut ImGuiWindow;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindWindowByName(name: *const ::std::os::raw::c_char) -> *mut ImGuiWindow;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igUpdateWindowParentAndRootLinks(
        window: *mut ImGuiWindow,
        flags: ImGuiWindowFlags,
        parent_window: *mut ImGuiWindow,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCalcWindowExpectedSize(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsWindowChildOf(window: *mut ImGuiWindow, potential_parent: *mut ImGuiWindow) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsWindowNavFocusable(window: *mut ImGuiWindow) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowAllowedExtentRect(pOut: *mut ImRect, window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowPosWindowPtr(window: *mut ImGuiWindow, pos: ImVec2, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowSizeWindowPtr(window: *mut ImGuiWindow, size: ImVec2, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowCollapsedWindowPtr(
        window: *mut ImGuiWindow,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowHitTestHole(window: *mut ImGuiWindow, pos: ImVec2, size: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFocusWindow(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFocusTopMostWindowUnderOne(
        under_this_window: *mut ImGuiWindow,
        ignore_window: *mut ImGuiWindow,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBringWindowToFocusFront(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBringWindowToDisplayFront(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBringWindowToDisplayBack(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetCurrentFont(font: *mut ImFont);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetDefaultFont() -> *mut ImFont;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetForegroundDrawListWindowPtr(window: *mut ImGuiWindow) -> *mut ImDrawList;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInitialize(context: *mut ImGuiContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShutdown(context: *mut ImGuiContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igUpdateHoveredWindowAndCaptureFlags();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igStartMouseMovingWindow(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igStartMouseMovingWindowOrNode(
        window: *mut ImGuiWindow,
        node: *mut ImGuiDockNode,
        undock_floating_node: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igUpdateMouseMovingWindowNewFrame();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igUpdateMouseMovingWindowEndFrame();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTranslateWindowsInViewport(
        viewport: *mut ImGuiViewportP,
        old_pos: ImVec2,
        new_pos: ImVec2,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igScaleWindowsInViewport(viewport: *mut ImGuiViewportP, scale: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDestroyPlatformWindow(viewport: *mut ImGuiViewportP);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShowViewportThumbnails();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igMarkIniSettingsDirtyNil();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igMarkIniSettingsDirtyWindowPtr(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igClearIniSettings();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCreateNewWindowSettings(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindowSettings;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindWindowSettings(id: ImGuiID) -> *mut ImGuiWindowSettings;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindOrCreateWindowSettings(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindowSettings;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindSettingsHandler(
        type_name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiSettingsHandler;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNextWindowScroll(scroll: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetScrollXWindowPtr(window: *mut ImGuiWindow, scroll_x: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetScrollYWindowPtr(window: *mut ImGuiWindow, scroll_y: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetScrollFromPosXWindowPtr(
        window: *mut ImGuiWindow,
        local_x: f32,
        center_x_ratio: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetScrollFromPosYWindowPtr(
        window: *mut ImGuiWindow,
        local_y: f32,
        center_y_ratio: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igScrollToBringRectIntoView(
        pOut: *mut ImVec2,
        window: *mut ImGuiWindow,
        item_rect: ImRect,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetItemID() -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetItemStatusFlags() -> ImGuiItemStatusFlags;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetActiveID() -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetFocusID() -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetActiveID(id: ImGuiID, window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetFocusID(id: ImGuiID, window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igClearActiveID();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetHoveredID() -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetHoveredID(id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igKeepAliveID(id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igMarkItemEdited(id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushOverrideID(id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetIDWithSeed(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
        seed: ImGuiID,
    ) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igItemSizeVec2(size: ImVec2, text_baseline_y: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igItemSizeRect(bb: ImRect, text_baseline_y: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igItemAdd(bb: ImRect, id: ImGuiID, nav_bb: *const ImRect) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igItemHoverable(bb: ImRect, id: ImGuiID) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsClippedEx(bb: ImRect, id: ImGuiID, clip_even_when_logged: bool) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetLastItemData(
        window: *mut ImGuiWindow,
        item_id: ImGuiID,
        status_flags: ImGuiItemStatusFlags,
        item_rect: ImRect,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFocusableItemRegister(window: *mut ImGuiWindow, id: ImGuiID) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFocusableItemUnregister(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCalcItemSize(pOut: *mut ImVec2, size: ImVec2, default_w: f32, default_h: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCalcWrapWidthForPos(pos: ImVec2, wrap_pos_x: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushMultiItemsWidths(components: ::std::os::raw::c_int, width_full: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushItemFlag(option: ImGuiItemFlags, enabled: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopItemFlag();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsItemToggledSelection() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetContentRegionMaxAbs(pOut: *mut ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShrinkWidths(
        items: *mut ImGuiShrinkWidthItem,
        count: ::std::os::raw::c_int,
        width_excess: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLogBegin(type_: ImGuiLogType, auto_open_depth: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLogToBuffer(auto_open_depth: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginChildEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        size_arg: ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igOpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igClosePopupToLevel(
        remaining: ::std::os::raw::c_int,
        restore_focus_to_window_under_popup: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igClosePopupsOverWindow(
        ref_window: *mut ImGuiWindow,
        restore_focus_to_window_under_popup: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsPopupOpenID(id: ImGuiID, popup_flags: ImGuiPopupFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginPopupEx(id: ImGuiID, extra_flags: ImGuiWindowFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginTooltipEx(extra_flags: ImGuiWindowFlags, tooltip_flags: ImGuiTooltipFlags);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetTopMostPopupModal() -> *mut ImGuiWindow;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindBestWindowPosForPopup(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindBestWindowPosForPopupEx(
        pOut: *mut ImVec2,
        ref_pos: ImVec2,
        size: ImVec2,
        last_dir: *mut ImGuiDir,
        r_outer: ImRect,
        r_avoid: ImRect,
        policy: ImGuiPopupPositionPolicy,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igNavInitWindow(window: *mut ImGuiWindow, force_reinit: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igNavMoveRequestButNoResultYet() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igNavMoveRequestCancel();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igNavMoveRequestForward(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        bb_rel: ImRect,
        move_flags: ImGuiNavMoveFlags,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igNavMoveRequestTryWrapping(window: *mut ImGuiWindow, move_flags: ImGuiNavMoveFlags);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetNavInputAmount(n: ImGuiNavInput, mode: ImGuiInputReadMode) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetNavInputAmount2d(
        pOut: *mut ImVec2,
        dir_sources: ImGuiNavDirSourceFlags,
        mode: ImGuiInputReadMode,
        slow_factor: f32,
        fast_factor: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCalcTypematicRepeatAmount(
        t0: f32,
        t1: f32,
        repeat_delay: f32,
        repeat_rate: f32,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igActivateItem(id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNavID(id: ImGuiID, nav_layer: ::std::os::raw::c_int, focus_scope_id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetNavIDWithRectRel(
        id: ImGuiID,
        nav_layer: ::std::os::raw::c_int,
        focus_scope_id: ImGuiID,
        rect_rel: ImRect,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushFocusScope(id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopFocusScope();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetFocusScopeID() -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsActiveIdUsingNavDir(dir: ImGuiDir) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsActiveIdUsingNavInput(input: ImGuiNavInput) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsActiveIdUsingKey(key: ImGuiKey) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsKeyPressedMap(key: ImGuiKey, repeat: bool) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsNavInputDown(n: ImGuiNavInput) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsNavInputTest(n: ImGuiNavInput, rm: ImGuiInputReadMode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetMergedKeyModFlags() -> ImGuiKeyModFlags;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextInitialize(ctx: *mut ImGuiContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextShutdown(ctx: *mut ImGuiContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextClearNodes(
        ctx: *mut ImGuiContext,
        root_id: ImGuiID,
        clear_settings_refs: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextRebuildNodes(ctx: *mut ImGuiContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextUpdateUndocking(ctx: *mut ImGuiContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextUpdateDocking(ctx: *mut ImGuiContext);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextGenNodeID(ctx: *mut ImGuiContext) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextQueueDock(
        ctx: *mut ImGuiContext,
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload: *mut ImGuiWindow,
        split_dir: ImGuiDir,
        split_ratio: f32,
        split_outer: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextQueueUndockWindow(ctx: *mut ImGuiContext, window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextQueueUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockContextCalcDropPosForDocking(
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload: *mut ImGuiWindow,
        split_dir: ImGuiDir,
        split_outer: bool,
        out_pos: *mut ImVec2,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockNodeGetRootNode(node: *mut ImGuiDockNode) -> *mut ImGuiDockNode;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockNodeGetDepth(node: *const ImGuiDockNode) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowDockNode() -> *mut ImGuiDockNode;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowAlwaysWantOwnTabBar(window: *mut ImGuiWindow) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginDocked(window: *mut ImGuiWindow, p_open: *mut bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginDockableDragDropSource(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginDockableDragDropTarget(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowDock(window: *mut ImGuiWindow, dock_id: ImGuiID, cond: ImGuiCond);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderDockWindow(window_name: *const ::std::os::raw::c_char, node_id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderGetNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderGetCentralNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderAddNode(node_id: ImGuiID, flags: ImGuiDockNodeFlags) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderRemoveNode(node_id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderRemoveNodeDockedWindows(node_id: ImGuiID, clear_settings_refs: bool);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderRemoveNodeChildNodes(node_id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderSetNodePos(node_id: ImGuiID, pos: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderSetNodeSize(node_id: ImGuiID, size: ImVec2);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderSplitNode(
        node_id: ImGuiID,
        split_dir: ImGuiDir,
        size_ratio_for_node_at_dir: f32,
        out_id_at_dir: *mut ImGuiID,
        out_id_at_opposite_dir: *mut ImGuiID,
    ) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderCopyDockSpace(
        src_dockspace_id: ImGuiID,
        dst_dockspace_id: ImGuiID,
        in_window_remap_pairs: *mut ImVector_const_charPtr,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderCopyNode(
        src_node_id: ImGuiID,
        dst_node_id: ImGuiID,
        out_node_remap_pairs: *mut ImVector_ImGuiID,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderCopyWindowSettings(
        src_name: *const ::std::os::raw::c_char,
        dst_name: *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDockBuilderFinish(node_id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginDragDropTargetCustom(bb: ImRect, id: ImGuiID) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igClearDragDrop();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igIsDragDropPayloadBeingAccepted() -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSetWindowClipRectBeforeSetChannel(window: *mut ImGuiWindow, clip_rect: ImRect);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginColumns(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        flags: ImGuiColumnsFlags,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igEndColumns();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushColumnClipRect(column_index: ::std::os::raw::c_int);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPushColumnsBackground();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPopColumnsBackground();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetColumnsID(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindOrCreateColumns(window: *mut ImGuiWindow, id: ImGuiID) -> *mut ImGuiColumns;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetColumnOffsetFromNorm(columns: *const ImGuiColumns, offset_norm: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetColumnNormFromOffset(columns: *const ImGuiColumns, offset: f32) -> f32;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igBeginTabBarEx(
        tab_bar: *mut ImGuiTabBar,
        bb: ImRect,
        flags: ImGuiTabBarFlags,
        dock_node: *mut ImGuiDockNode,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabBarFindTabByID(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID) -> *mut ImGuiTabItem;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabBarFindMostRecentlySelectedTabForActiveWindow(
        tab_bar: *mut ImGuiTabBar,
    ) -> *mut ImGuiTabItem;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabBarAddTab(
        tab_bar: *mut ImGuiTabBar,
        tab_flags: ImGuiTabItemFlags,
        window: *mut ImGuiWindow,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabBarRemoveTab(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabBarCloseTab(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabBarQueueReorder(
        tab_bar: *mut ImGuiTabBar,
        tab: *const ImGuiTabItem,
        dir: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabBarProcessReorder(tab_bar: *mut ImGuiTabBar) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabItemEx(
        tab_bar: *mut ImGuiTabBar,
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
        docked_window: *mut ImGuiWindow,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabItemCalcSize(
        pOut: *mut ImVec2,
        label: *const ::std::os::raw::c_char,
        has_close_button: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabItemBackground(
        draw_list: *mut ImDrawList,
        bb: ImRect,
        flags: ImGuiTabItemFlags,
        col: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTabItemLabelAndCloseButton(
        draw_list: *mut ImDrawList,
        bb: ImRect,
        flags: ImGuiTabItemFlags,
        frame_padding: ImVec2,
        label: *const ::std::os::raw::c_char,
        tab_id: ImGuiID,
        close_button_id: ImGuiID,
        is_contents_visible: bool,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderText(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_hash: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderTextWrapped(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderTextClipped(
        pos_min: ImVec2,
        pos_max: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: ImVec2,
        clip_rect: *const ImRect,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderTextClippedEx(
        draw_list: *mut ImDrawList,
        pos_min: ImVec2,
        pos_max: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: ImVec2,
        clip_rect: *const ImRect,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderTextEllipsis(
        draw_list: *mut ImDrawList,
        pos_min: ImVec2,
        pos_max: ImVec2,
        clip_max_x: f32,
        ellipsis_max_x: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderFrame(
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        border: bool,
        rounding: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderColorRectWithAlphaCheckerboard(
        draw_list: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        grid_step: f32,
        grid_off: ImVec2,
        rounding: f32,
        rounding_corners_flags: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderNavHighlight(bb: ImRect, id: ImGuiID, flags: ImGuiNavHighlightFlags);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igFindRenderedTextEnd(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLogRenderedText(
        ref_pos: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderArrow(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        dir: ImGuiDir,
        scale: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderBullet(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderCheckMark(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32, sz: f32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderMouseCursor(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        scale: f32,
        mouse_cursor: ImGuiMouseCursor,
        col_fill: ImU32,
        col_border: ImU32,
        col_shadow: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderArrowPointingAt(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        half_sz: ImVec2,
        direction: ImGuiDir,
        col: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderArrowDockMenu(draw_list: *mut ImDrawList, p_min: ImVec2, sz: f32, col: ImU32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderRectFilledRangeH(
        draw_list: *mut ImDrawList,
        rect: ImRect,
        col: ImU32,
        x_start_norm: f32,
        x_end_norm: f32,
        rounding: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igRenderRectFilledWithHole(
        draw_list: *mut ImDrawList,
        outer: ImRect,
        inner: ImRect,
        col: ImU32,
        rounding: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTextEx(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        flags: ImGuiTextFlags,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igButtonEx(
        label: *const ::std::os::raw::c_char,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCloseButton(id: ImGuiID, pos: ImVec2) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igCollapseButton(id: ImGuiID, pos: ImVec2, dock_node: *mut ImGuiDockNode) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igArrowButtonEx(
        str_id: *const ::std::os::raw::c_char,
        dir: ImGuiDir,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igScrollbar(axis: ImGuiAxis);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igScrollbarEx(
        bb: ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        p_scroll_v: *mut f32,
        avail_v: f32,
        contents_v: f32,
        rounding_corners: ImDrawCornerFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImageButtonEx(
        id: ImGuiID,
        texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        padding: ImVec2,
        bg_col: ImVec4,
        tint_col: ImVec4,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowScrollbarRect(pOut: *mut ImRect, window: *mut ImGuiWindow, axis: ImGuiAxis);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowScrollbarID(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetWindowResizeID(window: *mut ImGuiWindow, n: ::std::os::raw::c_int) -> ImGuiID;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSeparatorEx(flags: ImGuiSeparatorFlags);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igButtonBehavior(
        bb: ImRect,
        id: ImGuiID,
        out_hovered: *mut bool,
        out_held: *mut bool,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDragBehavior(
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSliderBehavior(
        bb: ImRect,
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
        out_grab_bb: *mut ImRect,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igSplitterBehavior(
        bb: ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        size1: *mut f32,
        size2: *mut f32,
        min_size1: f32,
        min_size2: f32,
        hover_extend: f32,
        hover_visibility_delay: f32,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreeNodeBehavior(
        id: ImGuiID,
        flags: ImGuiTreeNodeFlags,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreeNodeBehaviorIsOpen(id: ImGuiID, flags: ImGuiTreeNodeFlags) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTreePushOverrideID(id: ImGuiID);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDataTypeGetInfo(data_type: ImGuiDataType) -> *const ImGuiDataTypeInfo;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDataTypeFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        data_type: ImGuiDataType,
        p_data: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDataTypeApplyOp(
        data_type: ImGuiDataType,
        op: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_void,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDataTypeApplyOpFromText(
        buf: *const ::std::os::raw::c_char,
        initial_value_buf: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDataTypeCompare(
        data_type: ImGuiDataType,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDataTypeClamp(
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igInputTextEx(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        size_arg: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTempInputText(
        bb: ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTempInputScalar(
        bb: ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        p_clamp_min: *const ::std::os::raw::c_void,
        p_clamp_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igTempInputIsActive(id: ImGuiID) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGetInputTextState(id: ImGuiID) -> *mut ImGuiInputTextState;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorTooltip(
        text: *const ::std::os::raw::c_char,
        col: *const f32,
        flags: ImGuiColorEditFlags,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorEditOptionsPopup(col: *const f32, flags: ImGuiColorEditFlags);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igColorPickerOptionsPopup(ref_col: *const f32, flags: ImGuiColorEditFlags);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igPlotEx(
        plot_type: ImGuiPlotType,
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        frame_size: ImVec2,
    ) -> ::std::os::raw::c_int;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShadeVertsLinearColorGradientKeepAlpha(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        gradient_p0: ImVec2,
        gradient_p1: ImVec2,
        col0: ImU32,
        col1: ImU32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igShadeVertsLinearUV(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        a: ImVec2,
        b: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        clamp: bool,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGcCompactTransientWindowBuffers(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igGcAwakeTransientWindowBuffers(window: *mut ImGuiWindow);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDebugDrawItemRect(col: ImU32);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igDebugStartItemPicker();
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFontAtlasBuildWithStbTruetype(atlas: *mut ImFontAtlas) -> bool;
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFontAtlasBuildInit(atlas: *mut ImFontAtlas);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFontAtlasBuildSetupFont(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        font_config: *mut ImFontConfig,
        ascent: f32,
        descent: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFontAtlasBuildPackCustomRects(
        atlas: *mut ImFontAtlas,
        stbrp_context_opaque: *mut ::std::os::raw::c_void,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFontAtlasBuildFinish(atlas: *mut ImFontAtlas);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFontAtlasBuildRender1bppRectFromString(
        atlas: *mut ImFontAtlas,
        atlas_x: ::std::os::raw::c_int,
        atlas_y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
        in_marker_pixel_value: ::std::os::raw::c_uchar,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFontAtlasBuildMultiplyCalcLookupTable(
        out_table: *mut ::std::os::raw::c_uchar,
        in_multiply_factor: f32,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igImFontAtlasBuildMultiplyRectAlpha8(
        table: *const ::std::os::raw::c_uchar,
        pixels: *mut ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn igLogText(fmt: *const ::std::os::raw::c_char, ...);
}
#[link(wasm_import_module = "imgui-sys-v0")]
extern "C" {
    pub fn ImGuiTextBuffer_appendf(
        buffer: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
